var documenterSearchIndex = {"docs":
[{"location":"chapter7/#The-Design-of-AppliAR.jl-1","page":"7 - The Design","title":"2 - The Design of AppliAR.jl","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter7/#Contents-1","page":"7 - The Design","title":"Contents","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Pages = [\"chapter7.md\"]","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"First, let's look at some terms and definitions. We'll convert the procedure Invoicing into an activity diagram. Using the Onion Architecture pattern, we define the Domain objects and the Julia API-functions. In the Infrastructure layer, we put the functions that interact with the outer world and the inner layers.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"","category":"page"},{"location":"chapter7/#Terms-and-Definitions-1","page":"7 - The Design","title":"Terms and Definitions","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"The points of attention are:","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Procedure,\nDomain-driven design,\nDistributed processing, and\nStyle conventions.","category":"page"},{"location":"chapter7/#Procedure-1","page":"7 - The Design","title":"Procedure","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"A procedure is a description of work practice, a workflow. It describes a series of activities or actions in a particular order and interacts with people and machines. Actions make use of resources. Data, a service or a product, is the output of work.","category":"page"},{"location":"chapter7/#Domain-Driven-Design-1","page":"7 - The Design","title":"Domain-Driven Design","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Each process should be domain-specific. Subject matter experts and users of the domain speak the same language and use the same definitions and synonyms for concepts and objects. It leads to a Domain-driven design paradigm.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"The Onion Architecture lends itself perfectly to the domain-driven design pattern. It divides an application into four areas: core, domain, API, and infrastructure.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"The core consists out of the Julia language constructs and Julia modules. Modules are also called packages.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"The next layer, the domain, defines the domain entities and concepts. Between its elements, there must be coherence. You only use constructs from the core. UnpaidInvoice is an example.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"The next peel is the API. The API consists of Julia functions that operate on the domain elements, and are used to create programs. You only use constructs from the core and the domain.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"create_unpaidinvoice, create_paidinvoice, create_pdf are examples.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"The infrastructure layer is the ultimate peel. With its functions, it communicates with the external world. Adapters overcome mismatches between interfaces. When you write you the code, you use elements from the inner layers.","category":"page"},{"location":"chapter7/#Distributed-Processing-1","page":"7 - The Design","title":"Distributed Processing","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Programs, written in Julia language, also can run on other processor cores. Even in Docker containers on remote machines. Julia uses the master-worker concept. It means that the master executes Julia's functions on workers.","category":"page"},{"location":"chapter7/#Style-Conventions-1","page":"7 - The Design","title":"Style Conventions","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"The article Blue: a Style Guide for Julia describes the style conventions.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"","category":"page"},{"location":"chapter7/#A-Procedure-as-a-Starting-Point-1","page":"7 - The Design","title":"A Procedure as a Starting Point","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"In 1994 we were delivering Lotus Notes instructor-led training in the Netherlands. We became ISO-9001 certified one year later. ISO is short for the International Organization for Standardization. A part of ISO is the section procedures.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"A procedure describes a workflow of a business process. It specifies the activities to be carried out by people or machines and the resources that are required to produce a result.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"An input triggers a process. Every action creates an output, most of the time, modified information or side-effects such as saving data.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"The example I use in the course is the procedure Invoicing.","category":"page"},{"location":"chapter7/#The-Course-Example-1","page":"7 - The Design","title":"The Course Example","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"In 1998 we rewrote our procedures as a table. Every row represents an activity or action. Next to the events are the columns with the roles involved with the work. The original procedure:","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Procedure: Invoicing.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Roles: OM = Office Manage, AOM = Assistant Office Manager.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Input: List of orders.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Step Action AOM OM Output Tool Exception\n1 Create an invoice per order R A Created and authorized invoices Order file \n2 Archive a copy of the invoice R  Archived copy Accounts Receivable unpaid \n3 Send the invoice to the customer R I Invoice sent  \n4 Book the invoice R A Booked invoice General ledger \n5 Book the paid invoice R A Paid invoice Bank records, General ledger \n6 Archive the paid invoice R I Archived invoice Accounts Receivable paid \n7 Check unpaid invoices  R List of unpaid invoices to contact customer Note in CRM system ","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"RASCI","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"R = Responsible, the entity who is responsible for the execution of the activity.\nA = Approves, the entity who approves the result before going to the next step.\nS = Supports, the members of the team.\nC = Consults, an entity.\nI = Informed, notify the entity about the result.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Let's see how we can automate the procedure with Julia. We tackle it with a technique of Domain-Driven Design and the Onion architecture.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"","category":"page"},{"location":"chapter7/#The-Procedure-as-an-Activity-Diagram-1","page":"7 - The Design","title":"The Procedure as an Activity Diagram","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"The activity diagram represents the workflow. The actions are Julia functions. You can add typed arguments and return values in Julia, noted by a double colon (::) followed by the name of the type. This defines the domain entities, e.g., ::Order, ::UnpaidInvoice.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"⚉ process(::Array{Order)::Array{JournalEntry}\n    ↓\n    create(::Array{Order}::Array{UnpaidInvoice}\n    ↓\n    send_email(::Array{UnpaidInvoice}) # TODO\n    ↓\n    archive(::Array{UnpaidInvoice})\n    ↓\n    create(::Array{UnpaidInvoice}::Array{JournalEntry}\n    ↓\n    return ::Array{JournalEntry}\n    ↓\n    ◉\n\n⚉ process(::Array{UnpaidInvoice}, ::Array{BankStatement})::Array{JournalEntry}\n    ↓\n    filter(::Array{UnpaidInvoice}, ::Array{Bankstatement})::Array{PaidInvoice}\n    ↓\n    archive(::Array{PaidInvoice})\n    ↓\n    create(::Array{PaidInvoice})::Array{JournalEntry}\n    ↓\n    return ::Array{JournalEntry}\n    ↓\n    ◉\n\n⚉ report(::Array{UnpaidInvoice}, days::Int) # TODO\n    ↓\n    filter(::Array{UnpaidInvoice, ::Int}::Array{UnpaidInvoiceDue}\n    ↓\n    return ::Array{UnpaidInvoiceDue}\n    ↓\n    ◉","category":"page"},{"location":"chapter7/#The-Design-1","page":"7 - The Design","title":"The Design","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"From the activity diagram we get:","category":"page"},{"location":"chapter7/#Domain-Elements-1","page":"7 - The Design","title":"Domain Elements","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"The domain objects (types) are:","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Domain Types:","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"UnpaidInvoice;\nPaidInvoice;\nBankStatement.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"External Types:","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"AppliSales.Order¹;\nAppliGeneralLedger.JournalEntry².","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"General packages:","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Dates³;\nDataFrames³","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"¹ Defined in the package AppliSales.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"² Defined in the package AppliGeneralLedger.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"³ Dates is a sub-module of Julia. A package for manipulating data is DataFrames. The DataFrame data structure is comparable to a spreadsheet.","category":"page"},{"location":"chapter7/#API-1","page":"7 - The Design","title":"API","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"The API contains the methods (functions) of the module. The methods use only elements from the core or domain. An overview of we need:","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"create(::Array{Order,1})::Array{UnpaidInvoice, 1}\ncreate(::Array{UnpaidInvoice, 1}, ::Array{BankStatement, 1})::Array{PaidInvoice,1)\nconv2entry(inv::Array{UnpaidInvoice, 1}, from::Int, to::Int)::Array{JournalEntry, 1}\nconv2entry(inv::Array{PaidInvoice, 1}, from::Int, to::Int)::Array{JournalEntry, 1}","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"In Julia, you can use the same function name as long as the signature is different, so other types and, or the number of arguments. One calls it multiple dispatch.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"An Order, consists of the data objects Training, and Company plus additional data about contact, and student. Order is defined in domain.jl of the support-package AppliSales.","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Also, we have already created a support-package AppliGeneralLedger to make it easier to test AppliAR.jl. JournalEntry is defined in domain.jl.","category":"page"},{"location":"chapter7/#Methods-of-the-Infrastructure-Layer-1","page":"7 - The Design","title":"Methods of the Infrastructure Layer","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"Database, private methods:","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"add_to_file(file::String, data::Array{Any, 1}\nread_from_file(file::String)::Array{Any, 1}","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"External accessable methods:","category":"page"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"read_bank_statements(path::String)::Array{BankStatement,1}\nprocess(::Array{Order)::Array{JounalEntry, 1}\nprocess(::UnpaidInvoice, ::BankStatement)::Array{JounalEntry, 1}\nretrieve_unpaid_invoices()::Array{UnpaidInvoice, 1}\nretrieve_paid_invoice()::Array{PaidInvoice, 1}","category":"page"},{"location":"chapter7/#ToDo-1","page":"7 - The Design","title":"ToDo","text":"","category":"section"},{"location":"chapter7/#","page":"7 - The Design","title":"7 - The Design","text":"I am thinking of Literate.jl as a package to make PDFs.\nHow to attach a PDF to an email?\nHow to send an email?\nSMTPClient.jl","category":"page"},{"location":"chapterx9/#.-Introduction-1","page":"9. Introduction","title":"9. Introduction","text":"","category":"section"},{"location":"chapterx9/#","page":"9. Introduction","title":"9. Introduction","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapterx9/#What-is-Docker?-1","page":"9. Introduction","title":"What is Docker?","text":"","category":"section"},{"location":"chapterx9/#What-is-a-Dockerfile-1","page":"9. Introduction","title":"What is a Dockerfile","text":"","category":"section"},{"location":"chapterx9/#What-is-docker-compose-1","page":"9. Introduction","title":"What is docker-compose","text":"","category":"section"},{"location":"blog/#Blog-1","page":"Blog","title":"Blog","text":"","category":"section"},{"location":"blog/#-1","page":"Blog","title":"2020","text":"","category":"section"},{"location":"blog/#/20/2020-1","page":"Blog","title":"08/20/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Finished section 1 Experimenting with Modules. Reviewed chapters one till six. I did the activities and exercises. Looks good.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"The next step is section 2 The Accounts Receivable Module.","category":"page"},{"location":"blog/#/11/2020-1","page":"Blog","title":"08/11/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Today, I 'finished' the Accounts.jl module. I am happy that I switched to an easier example of the activities and exercise.","category":"page"},{"location":"blog/#/03/2020-1","page":"Blog","title":"08/03/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Received my Samsung Portable SSD T5 and installed Ubuntu 20.04 on it. It is very fast.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I also rewrote the appendix with up-to-date installation instructions. I changed the name Appendix into Installation instructions. See.","category":"page"},{"location":"blog/#/15/2020-Rewrite-the-course-1","page":"Blog","title":"07/15/2020 - Rewrite the course","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Added documentation to AppliAR. In 4. Example the code that uses Docker containers and actors. Now ready to rewrite the course and incorporate the actors.","category":"page"},{"location":"blog/#/10/2020-Rocket.jl-1","page":"Blog","title":"07/10/2020 - Rocket.jl","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I played last week with Rocket.jl, a package where you can work with actors. During the time I worked with Akka and Scala, I became familiar with the idea of actors.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Actors send messages to other actors, which are stored in their mailbox and then processed one by one. The advantage is that the actors are completely separated from each other and can manage their data.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"The results were positive, so I consider to set up the application the way I did with Akka.","category":"page"},{"location":"blog/#/25/2020-Domain,-API,-and-Infrastructure-as-sub-modules-1","page":"Blog","title":"06/25/2020 - Domain, API, and Infrastructure as sub-modules","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"A sub-module is a defined unit where you define what the input is and what someone else can use. Would it have an advantage to define the Domain, API and Infrastructure shell as a sub module as well?  I implemented it in AppliAR.","category":"page"},{"location":"blog/#/11/2020-Registered-the-packages-AppliSales-and-AppliGeneralLedger-1","page":"Blog","title":"05/11/2020 - Registered the packages AppliSales and AppliGeneralLedger","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Last Friday, I have registered my first packages at JuliaRegistries/General:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"AppliSales\nAppliGeneralLedger","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"To register the packages you use https://juliahub.com/ui/Packages, using the Registering Packages page. You have to wait for three days before you can add the packages to a project.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I had to do this because AppliSales and AppliGeneralLedgers are dependencies in AppliAR.jl and I wanted to make use of Travis CI. Travis CI requires that it can add the tests (in runtests.jl) from the official Julia registry.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Now I am considering to partially rewrite the course to incorporate my newly acquired knowledge.","category":"page"},{"location":"blog/#/07/2020-PkgTemplates.jl-1","page":"Blog","title":"05/07/2020 - PkgTemplates.jl","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"After watching the video Developing Julia Packages I decided to use PkgTemplates.jl as the starting point for package development.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I created the package AppliAR.jl (AR = Account Receivable) with the code from AppliInvoicing.jl, a name I will replace.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Also, I recreated the supporting packages AppliSales.jl and AppliGeneral.jl.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Overall, I believe that what I learned from using PkgTemplates makes the application more professional. Unfortunately, I have to rewrite parts of the course.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"In AppliMaster.jl you find the files test_local_channels_2.jl and client.jl to test the application.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"# test_local_channels2.jl\n\nusing Pkg\nPkg.activate(\".\")\n\n# remove old stuff\ncmd = `rm test_invoicing.sqlite test_ledger.txt test_journal.txt`\nrun(cmd)\n\n# enable distrbuted computing\nusing Distributed\n@info(\"Enable distributed computing\")\n\n# this should be the next step\nnp = addprocs(4; exeflags=`--project=$(Base.active_project())`)\n#np = addprocs([(\"rob@192.168.2.77:2222\", :auto)]; exeflags=`--project=$(Base.active_project())`)\n@info(\"number of processes is $(length(np))\")\n\n# activate the packages (before the processes are created)\n@everywhere begin\n    using AppliSales\n    using AppliGeneralLedger\n    using AppliAR\nend;\n\n@info(\"Distributed computing enabled\")\n\n# get the tasks and dispatcher\ninclude(\"./api/api.jl\")\n\n# start the dispatcher\nrx = dispatcher()\n@info(\"Dispatcher started\")\n\n# start application remote\ninclude(\"client.jl\")\n\n# display aging report\nusing DataFrames\n\nsleep(10)\nr = DataFrame(report())\nprintln(\"\\nUnpaid invoices\\n============\")\nprintln(r)\n","category":"page"},{"location":"blog/#/17/2010-Using-socket-for-remote-communication-1","page":"Blog","title":"04/17/2010 - Using socket for remote communication","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I have defined Task_4 in myfunctions2.jl of AppliMaster. The task listens on port 8000. When data is detected, it is deserialized. The string START will initiate the process. Sending a BankStatement will create the paid invoices.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"First start test_local_channels_2.jl. Then run the next code in a separate Julia session.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"using Sockets\nusing Serialization\nusing AppliGeneralLedger, AppliInvoicing\n\nio = connect(\"<ip target laptop>\", 8000)\n\n# start application\nserialize(io, \"START\")\n\n# send bankstatements\nstms = AppliInvoicing.read_bank_statements(\"./bank.csv\")\nserialize(io, stms)","category":"page"},{"location":"blog/#/27/2020-Extending-Julia-LOAD_PATH-1","page":"Blog","title":"03/27/2020 - Extending Julia LOAD_PATH","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"II wanted to add a new feature to AppliInvoicing: reporting e.g., an aging report. It should live in a submodule of AppliInvoicing. First, I created a branch dev:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"$ git branch dev\n\n$ git checkout dev\n\n$ atom .","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Next, I created the file Reporting.jl and created a dummy module Reporting:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"module Reporting\n\nconst PATH_DB = \"./invoicing.sqlite\"\n\nusing Dates\n\nusing AppliInvoicing\n\naging() = begin\n    unpaid_invoices = AppliInvoicing.retrieve_unpaid_invoices(PATH_DB)\n    list = []\n    for invoice in unpaid_invoices\n        date = invoice.meta.date\n        println(date, \" - \", Dates.today())\n    end\nend # aging\n\nend # module","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"After that, I added the function report() to api.jl and modified the file AppliInvoicing.jl:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"module AppliInvoicing\n\ngreet() = print(\"Hello World!\")\n\nexport create, process, retrieve_unpaid_invoices, read_bank_statements, report\n\n# first, link to the current model\ninclude(\"./infrastructure/infrastructure.jl\")\n\n# next, submodule Reporting\ninclude(\"Reporting.jl\")\nusing .Reporting: aging\n\nend # module","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"To test the module, I used AppliMaster. I didn't want all the time to upload AppliInvoicing to GitHub, so I extended the Julia LOAD_PATH. After removing the AppliInvoicing package, I added the next line to test_local_channels.jl:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"# define the local path for AppliInvoicing\n@everywhere push!(LOAD_PATH, \"/home/rob/julia-projects/tc/AppliInvoicing\")","category":"page"},{"location":"blog/#/25/2020-Holy-traits-pattern-implemented-in-dispatcher-1","page":"Blog","title":"03/25/2020 - Holy traits pattern implemented in dispatcher","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"The Holy traits pattern is described in the book Design Patterns and Best Practices with Julia. It can replace if-else constructs. Old situation dispatcher logic. With the new situation, we avoid troubles in the future when we use more Appli-packages. See current infrastructure, 6. Testing the application. The Holy traits pattern makes it more clear:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"# Holy traits pattern definition => can be moved to the domain layer\nabstract type Dispatcher end\nstruct T0 <: Dispatcher end # AppliMaster\nstruct T1 <: Dispatcher end # AppliInvoicing\nstruct T2 <: Dispatcher end # AppliGeneralLedger\nstruct T3 <: Dispatcher end # AppliInvoicing\n\n# the data types on rx-channel\nDispatcher(::Type{<: String}) = T0()\nDispatcher(::Type{<: Array{AppliSales.Order, 1}}) = T1()\nDispatcher(::Type{<: Array{AppliGeneralLedger.JournalEntry,1}}) = T2()\nDispatcher(::Type{<: Array{AppliInvoicing.BankStatement,1}}) = T3()\n# end Trait definition\n\nfunction dispatcher()\n    rx = Channel(32)\n\n    # instantiate tasks\n    tx0 = task_0(rx) # get orders from Sales\n    tx1 = task_1(rx) # process the orders\n    tx2 = task_2(rx) # process the journal entries\n    tx3 = task_3(rx) # process the unpaid invoices\n\n    # implementate Holy traits pattern\n    dispatch(x::T) where {T} = dispatch(Dispatcher(T), x)\n\n    dispatch(::T0, x) = put!(tx0, x)\n    dispatch(::T1, x) = put!(tx1, x)\n    dispatch(::T2, x) = put!(tx2, x)\n    dispatch(::T3, x) = put!(tx3, x)\n\n    @async while true\n        if isready(rx)\n            value = take!(rx)\n            @info(\"Dispatcher received $(typeof(value))\")\n            dispatch(value)\n        else\n            wait(rx)\n        end\n    end\n\n    return rx\nend # dispatcher\n","category":"page"},{"location":"blog/#/20/2020-Design-Patterns-and-Best-Practices-with-Julia-1","page":"Blog","title":"03/20/2020 - Design Patterns and Best Practices with Julia","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Recently I bought the book Design Patterns and Best Practices with Julia. I can recommend the book. After reading the chapter Modules, Packages, and Data Type Concepts, I decided to set up an abstract data tree, because it can give you a quick overview of your application. The branches are the abstract data types and the leaves the concrete data types. I chose Domain as an abstract root type.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Using the function subtypetree(Domain), I get an excellent overview of the data structure:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"julia> subtypes(Invoice)\n2-element Array{Any,1}:\n PaidInvoice  \n UnpaidInvoice\n\njulia> subtypetree(Domain)\nDomain\n    Invoice\n        PaidInvoice\n        UnpaidInvoice\n    Payment\n        BankStatement\n    Structure\n        BodyItem\n            OpentrainingItem\n        Header\n        MetaInvoice\n\njulia> fieldnames(PaidInvoice)\n(:id, :meta, :header, :body, :stm)\n\njulia> fieldnames(UnpaidInvoice)\n(:id, :meta, :header, :body)","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"See the Invoicing module documentation for more details.","category":"page"},{"location":"blog/#/12/2020-Relative-mark-down-links-1","page":"Blog","title":"03/12/2020 - Relative mark down links","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Chapter 11 was not updated. I also got a message Page build failure.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"The solution was to use relative links to switch between pages, e.g. ../chapter10/#.-Create-a-Dockerfile-in-the-folder-test_ssh-1.","category":"page"},{"location":"blog/#/11/2020-Pages.jl-and-HTTP.jl-1","page":"Blog","title":"03/11/2020 - Pages.jl and HTTP.jl","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I did some tests with Pages.jl and HHTP.jl, The result is promising. The solution is to send a file name over an Http connection and use scp to retrieve the file from the Raspberry Pi for further processing.","category":"page"},{"location":"blog/#The-test-1","page":"Blog","title":"The test","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Julia 1.3.1 running on my laptop in a Ubuntu docker container as server. The variable result will contain the file name:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"julia> using Pages\n\njulia> using JSON\n\njulia> @async Pages.start()\nTask (runnable) @0x00007fb2c0ee3340\n\njulia> result = \"\"\n\"\"\n\njulia> Endpoint(\"/test\", POST) do request::HTTP.Request\n           data = String(request.body)\n           global result = data\n           response = JSON.json(Dict(:data => data))\n       end\nEndpoint(Dict{Symbol,HTTP.Handlers.RequestHandlerFunction}(:POST => HTTP.Handlers.RequestHandlerFunction{var\"#11#12\"}(var\"#11#12\"())), \"/test\")","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Julia 1.3.1 running on my Raspberry Pi in a Ubuntu docker container as client:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"julia> using HTTP\n\njulia> r = HTTP.request(\"POST\", \"http://xxx.xxx.xxx.xxxxxxx:8000/test\", [], \"12345.jpg\")\nHTTP.Messages.Response:\n\"\"\"\nHTTP/1.1 200 OK\nTransfer-Encoding: chunked\n\n{\"data\":\"12345.jpg\"}\"\"\"","category":"page"},{"location":"blog/#/10/2020-SQLite-problem-Raspberry-Pi-1","page":"Blog","title":"03/10/2020 - SQLite problem Raspberry Pi","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"There is a problem with making a connection from a docker container on my Ubuntu laptop to a container on a Raspberry Pi 3+. I posted a question on  discourse.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"See Addprocs gives connection refused to a docker container on raspberry pi","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Now I consider using HTTP.jl (or Pages.jl) to inform the application to retrieve an image from my Raspi with scp.","category":"page"},{"location":"blog/#/04/2020-Documentation-AppliInvoicing-module-1","page":"Blog","title":"03/04/2020 - Documentation AppliInvoicing module","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I have completed the documentation for ApplInvoicing.jl","category":"page"},{"location":"blog/#/03/2020-2","page":"Blog","title":"03/03/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Created documentation for the module AppliGeneralLedger.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Master code runs successfully in a Docker container.","category":"page"},{"location":"blog/#/27/2020-dispatcher-is-working-1","page":"Blog","title":"02/27/2020 - dispatcher is working","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"SQLite gave problems with AppliGeneralLedger. I suspected it had something to do with multi-user issues. So I decided to experiment with Jula's open/read/write file functions.  The result was very positive, so I changed the code in AppliGeneralLedger.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"The test with remote channels went well. AppliMaster contains the code.","category":"page"},{"location":"blog/#/20/2020-addproc(4)-1","page":"Blog","title":"02/20/2020 - addproc(4)","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"In the past, I used Julia v1.1.0 and SQLite v0.8.x. I use a local channel with a dispatcher. It routes the data to the right task, which runs a Julia function remote. The application ran smoothly. The problem started when I switched to SQLite.jl v1.0.1. First, I thought that SQLite was causing the problem. However, the sample code uses only the AppliSales module, which doesn’t use SQLite.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I posted the problem on discourse.julialang.org: Distributed computing, not found package error. @pfitzseb gave the solution:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Try","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"addprocs(n_procs; exeflags=`--project=$(Base.active_project())`)","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"instead – the currently active environment doesn’t propagate to processes started by addprocs by default.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Now the application runs smoothly again. Thank you, `@pfitzseb.","category":"page"},{"location":"blog/#/07/2020-1","page":"Blog","title":"02/07/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Chapter 4, 5 en 6 are ready for a final check.","category":"page"},{"location":"blog/#/05/2020-1","page":"Blog","title":"02/05/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"While working on the AppliMaster module, I got yesterday the impression that I should always be working with the local package repository, ] active .:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Adding packages will update Project.toml, the file with the dependencies, and update the local Manifest.toml file. When you delete Manifest.toml, you have to add the packages again.\nWhen cloning a project works without adding the packages again.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"So I removed AppliInvoicing, AppliGeneralLedger, and AppliSales from the general repository. This morning I started AppliMaster in Atom. My code in test_remote_channels.jl didn't work anymore. The two Databases invoicing.sqlite and ledger.sqlite were not created.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I added the packages AppliInvoicing, AppliGeneralLedger, and AppliSales again to the general repository, and my code was running well. The only explanation I could think of: remote code only looks at the general repository.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I need to review the documentation on this subject.","category":"page"},{"location":"blog/#/02/2020-1","page":"Blog","title":"02/02/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"The pages test_remote_channels.jl and myfunctions.jl, I have embellished with @info. The flow of the data has now become more explicit. The code is on github: test_remote_channels.jl.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Working with channels runs smoothly. I only run the functions that perform the operations on a different core. The while true loops for task_1 and task_2 tasks run locally. Should I also run these loops remotely?","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"So I had to renumber the subsequent chapters.","category":"page"},{"location":"blog/#/01/2020-1","page":"Blog","title":"02/01/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Today I copied the blog from the AppliGate website to The course environment.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Things are going well with the course. The following modules are now ready(!):","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"AppliMaster - the basic module.\nAppliInvoicing - the application itself.\nAppliSales - sending test orders to AppliInvoicing.\nAppliGeneralLedger - to process journal entries from AppliInvoicing.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"In the last couple of weeks, I have been experimenting with the communication between the different parts. For the time being, I decided to work with Julia's channels. The implementation is in AppliMaster, testremotechannels.jl.","category":"page"},{"location":"blog/#-2","page":"Blog","title":"2019","text":"","category":"section"},{"location":"blog/#/05/2019-1","page":"Blog","title":"12/05/2019","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Last week I managed to establish an SSH connection between two containers. This week I could finish Chapter 9, Create the Container, more or less. The next step is to test a channel connection between two containers.","category":"page"},{"location":"blog/#/15/2019-1","page":"Blog","title":"11/15/2019","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Almost ready to link www.appligate.nl to rbontekoe.github.io. We have to change the CNAME record at the provider from appligate.appspot.com to rbontekoe.github.io.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"We also started with writing the course material for the online training BAWJ.","category":"page"},{"location":"blog/#/21/2019-1","page":"Blog","title":"10/21/2019","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Why not build a website with Documenter.jl? We did it today. When you go to AppliGate, you enter our new site. In the meantime, we got more experience with Julia. E.g., we resized Rob's picture with Images.jl. It was straightforward.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"julia> using Images\n\njulia> img = load(\"rob.png\")\n\njulia> img2 = imresize(img, ratio=0.5)\n\njulia> save(\"rob2.png\", img2)","category":"page"},{"location":"blog/#/17/2019-1","page":"Blog","title":"9/17/2019","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Reading Think Julia I discovered the package Serialization. While playing with it, I realized that it could solve my CQRS and Event Sourcing problem. With the method serialize, you can create a text representation of an object, that you can store. With deserialize, you do the reverse. Serialize writes to an IOStream, and deserialize reads from it. An IOStream can be an IOBuffer or a file. It makes Event Sourcing easier.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I also looked at channels. You can use channels to communicate between processes. For the time being, I will use inter CPU-core communication. Later on, I extend it to remote nodes. I only have to expand the methods of createSubscriber and createPublisher.","category":"page"},{"location":"blog/#/10/2019-1","page":"Blog","title":"9/10/2019","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Last week I was busy implementing the database methods. I realized that the domain objects I wanted to keep must have an identification code. So Subscriber, Publisher, and Message got an id. To create the id, I used the hash function with a name and time as a parameter. It had consequences for the documentation. In the example code, I used the tag 'jldoctest,' so Documenter could test the example code during the generation of the manual. Because the ids keep changing, I had to give up. Too bad, because I found that a strong point of Documenter.jl. I replaced the test tag 'jldoctest' with the language tag 'julia.' Maybe there is something to do against continually changing values.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Infected by the CQRS thought, I decided to add changed domain objects to the database instead of modifying an existing record.","category":"page"},{"location":"chapterx20/#.-Using-Remote-Channels-(old-stuff)-1","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"section"},{"location":"chapterx20/#What-you-will-learn-1","page":"20. Using Remote Channels (old stuff)","title":"What you will learn","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Pages = [\"chapter11.md\"]","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"In lesson 9, Creating SSH enabled Containers, we created two containers: test_sshd and test_sshd2. In this chapter, we learn how to run a function in a remote container test_sshd2. Before we use the model we created in earlier lessons, you will test the containers with the package RbO.jl.","category":"page"},{"location":"chapterx20/#Activity-1:-1","page":"20. Using Remote Channels (old stuff)","title":"Activity 1:","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"You start the two Docker containers, test_sshd, and test_sshd2. We need to know their Docker IP-addresses. With the command ssh rob@<ip-address>, we enter the test_sshd container. Within this container, we generate a process id bound to the IP-address of test_ssh2.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"We create the file main.jl, which contains the base code for container-container communication.","category":"page"},{"location":"chapterx20/#Activities-2a-and-2b:-1","page":"20. Using Remote Channels (old stuff)","title":"Activities 2a and 2b:","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Next, we use the example code to create a subscriber based on a name. We prefer to do the test with AppliGate's module RbO.jl. In chapter 12, you will use your modules.","category":"page"},{"location":"chapterx20/#Activity-3:-1","page":"20. Using Remote Channels (old stuff)","title":"Activity 3:","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"You learn to write a function that can run remotely, and that saves a subscriber in an SQLite database on the container test_sshd2.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#Activity-1:-Start-the-Julia-1.3.0-containers-1","page":"20. Using Remote Channels (old stuff)","title":"Activity 1: Start the Julia 1.3.0 containers","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Prerequisites:","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Docker is installed on your computer.\nYou have the two containers test_sshd and test_sshd2 created in chapter 9, Create the Container.\nBoth containers are SSH enabled.\nYou have a Internet connection to download the RbO.jl module.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Steps:","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Start both containers and check their Docker internal IP-address.\nUse SSH to connect from testsshd to testsshd2 and install RbO.jl in both containers.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#Step-1-Start-both-containers-and-check-their-Docker-internal-IP-address-1","page":"20. Using Remote Channels (old stuff)","title":"Step 1 - Start both containers and check their Docker internal IP-address","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Step Action Comment\n1 $ docker start test_sshd \n2 $ docker start test_sshd2 \n3 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd e.g. 172.17.0.2\n3 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd2 e.g. 172.17.0.3","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#Step-2-Use-SSH-to-connect-from-test_sshd-to-test_sshd2-and-install-RbO.jl-1","page":"20. Using Remote Channels (old stuff)","title":"Step 2 - Use SSH to connect from test_sshd to test_sshd2 and install RbO.jl","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Install RbO in both containers, Example of adding the module","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Step Action Comment\n1 $ ssh rob@172.17.0.2 Enter the container test_sshd.\n2 $ ssh rob@172.17.0.3 Enter the container test_sshd3.\n3 $ julia Start Julia.\n4 julia> ] Go to the package manager.\n5 pkg> add https://github.com/rbontekoe/RbO.jl Install RbO.jl.\n6 Ctrl-C Return to REPL prompt.\n7 Ctrl-D Leave Julia.\n8 Ctrl-D Leave the container test_sshd2.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"note: Note\nIf your container is running on a remote machine, you have to use the ip-address of the remote machine and the exported port of the container to connect to.$ docker start test_sshd # start the container test_sshd$ docker port test_sshd # display the port, e.g. 22/tcp -> 0.0.0.0:32768$ ssh 192.168.xxx.xxx -p 32768 # connect to the container on remote machine","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#main.jl-1","page":"20. Using Remote Channels (old stuff)","title":"main.jl","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"We use a function to run code in another container. The function will be called in a while loop. Because we use this construction more often, we pass the function as argument to a function called remote_body. Through the channel you transport the data for the function. We store he code of the remote_body function in the file main.jl.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"note: Note\nMaybe all the stuff can much more easier be accomplished by using:remotecall_fetch(f1, 2, createSubscriber(\"Daisy\"))\nremotecall_fetch(f2, 2, \"subscribers\")\nremotecall_fetch(f3, 4, [\"Gekke Jan\"], \"subscribers\")@everywhere f3(x, y) = begin\n    s = createSubscriber(x)\n    db = connect(\"./rbo.sqlite\")\n    create(db, y, [s])\n    true\nend","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"using Distributed\n\n#=\nThe container that wants to run code on another container initiate this function.It has two arguments:\n- pid, the process id created wi th the addprocs function.\n- funct, to run on the container, or remote machine. funct is in this example a function that accepts only one argument.\n=#\nfunction remote_body(pid::Int, funct)\n    tx = RemoteChannel(() -> Channel(32)) # local transmit channel\n    rx = RemoteChannel(() -> Channel(32)) # local receive channel\n\n    # run the code on the process id that has been passed\n    @async @spawnat pid begin\n        while true\n\t    try\n                if isready(tx) # channel has data\n\n                    # get the data from the tx-channel\n                    value = take!(tx)\n\n                    # execute the code of the function that was passed as argument\n                    result = funct(value)\n\n                    # for test purposes\n                    #@show result\n\n                    # put the result of the function on the rx-channel\n                    put!(rx, result)\n                else\n\n                    # for test purposes\n                    #which_funct = string(funct) * \" on process \" * string(myid()) * \" is waiting for data.\"\n                    #@show which_funct\n\n                    # the code wait until there is data on the tx-channel\n                    wait(tx)\n                end\n\t    catch e\n\t       put!(rx, e)\n\t    end\n        end\n    end\n\n    # return transmit and receive channel, so the calling container can communicate with the called container.\n    tx, rx\n\nend # defined remote_body\n\nd = Dict([]) # empty directory for pids, used by the calling container","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#Activity-2a:-Start-the-two-containers-and-create-main.jl-1","page":"20. Using Remote Channels (old stuff)","title":"Activity 2a: Start the two containers and create main.jl","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Prerequisites:","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Docker is installed on your computer.\nYou have the two containers testsshd and testsshd2 created in Chapter 9, Create the Container.\nBoth containers are SSH-enabled.\nJulia is installed in the directory julia on the containers.\nThe RbO.jl package is installed in both containers.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Steps","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Start the container test_sshd and create main.jl with nano.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#.-Start-the-container-test_sshd-and-create-main.jl-with-nano.-1","page":"20. Using Remote Channels (old stuff)","title":"1. Start the container test_sshd and create main.jl with nano.","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Step Action Comment\n1 $ docker start test_sshd Start the first container.\n2 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd Displays docker address, eg, 172.17.0.2.\n3 Take a note of the ip-address of test_sshd \n4 $ docker start test_sshd2 Start the second container.\n5 Take a note of the ip-address of test_sshd2 \n6 $ ssh rob@172.17.0.2 Use the ip-address step 2.\n7 Copy the main.jl code to the clipboard. \n8 $ nano main.jl Open a new file.\n9 Ctrl-Shift-V Paste the code form the clipboard.\n10 Ctrl-O Save the file.\n11 Ctrl-X Exit the editor.\n12 $ julia Start Julia, and continue at step 13 of Activity 2: Test the code","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#Example-test-code-1","page":"20. Using Remote Channels (old stuff)","title":"Example test code","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"julia> include(\"main.jl\")\nDict{Any,Any} with 0 entries\n\njulia> addprocs([(\"rob@172.17.0.3\", 1)])\n1-element Array{Int64,1}:\n 2\n\njulia> d[\"test_sshd2\"] = last(workers())\n2\n\njulia> @everywhere using RbO\n\njulia> tx1, rx1 = remote_body(d[\"test_sshd2\"], createSubscriber)\n(RemoteChannel{Channel{Any}}(1, 1, 7), RemoteChannel{Channel{Any}}(1, 1, 8))\n\njulia> tx2, rx2 = remote_body(d[\"test_sshd2\"], createPublisher)\n(RemoteChannel{Channel{Any}}(1, 1, 10), RemoteChannel{Channel{Any}}(1, 1, 11))\n\njulia> put!(tx1, \"Donald Duck\") # transmit value \"Donald Duck\" to container\nRemoteChannel{Channel{Any}}(1, 1, 7)\n\njulia> put!(tx2, \"The New York Times\")\nRemoteChannel{Channel{Any}}(1, 1, 10)\n\njulia> isready(rx1) ? take!(rx1) : \"\" # receive result\nSubscriber(\"1687381951631187484\", \"Donald Duck\", \"\", MEAN_CALCULATOR)\n\njulia> isready(rx2) ? take!(rx2) : \"\"\nPublisher(\"18206665133840381206\", \"The New York Times\", NEWSPAPER, Subscriber[])\n\njulia> @async while true\n           if isready(rx1)\n               @show take!(rx1)\n           else\n               wait(rx1)\n           end\n       end\nTask (runnable) @0x00007fbf925c5ae0\n\njulia> @async while true\n           if isready(rx2)\n               @show take!(rx2)\n           else\n               wait(rx2)\n           end\n       end\nTask (runnable) @0x00007fbf92f59ae0\n\njulia> put!(tx1, \"Daisy Duck\")\nRemoteChannel{Channel{Any}}(1, 1, 7)\n","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#Activity-2b:-Test-the-code-1","page":"20. Using Remote Channels (old stuff)","title":"Activity 2b: Test the code","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Prerequisites:","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Actitvity 2a","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Step Action Comment\n13 Copy all the Test code example code to the clipboard, including the julia prompt and the response \n14 Return to the container \n15 Ctrl-Shfi-V Paste the text on the clipboard in the Julia REPL.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"The result should look like the next example:","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"julia> take!(rx1) = Subscriber(\"15498821131237366424\", \"Donald Duck\", \"\", MEAN_CALCULATOR)\ntake!(rx2) = Publisher(\"8593928998820612462\", \"The New York Times\", NEWSPAPER, Subscriber[])\ntake!(rx1) = Subscriber(\"17785241625571045887\", \"Daisy Duck\", \"\", MEAN_CALCULATOR)","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#Activity-3:-Run-a-function-in-the-remote-container-1","page":"20. Using Remote Channels (old stuff)","title":"Activity 3: Run a function in the remote container","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Create and save a subscriber in the container test_sshd2. Then display all saved subscribers From a table. See also  RbO.jl.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Prerequisites:","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Activity 1\nActivity 2a & 2b\nThe package SQLite.jl is installed.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Steps:","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Install SQLite.jl\nTry the example code\nUse the RbO.jl documentation","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#.-Install-SQLite.jl-1","page":"20. Using Remote Channels (old stuff)","title":"1. Install SQLite.jl","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Step Action Comment\n1 Enter test_sshd and start Julia \n2 Go to the package manager \n3 pkg > add SQLite ","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#.-Try-the-example-code-1","page":"20. Using Remote Channels (old stuff)","title":"2. Try the example code","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Try the code below.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"include(\"main.jl\")\n\naddprocs([(\"rob@172.17.0.3\", 1)])\n\nd[\"test_sshd2\"] = last(workers())\n\n@everywhere using RbO\n\n# define a new function\n@everywhere f1(x) = begin\n  s = createSubscriber(x) # create a subscriber\n\tdb = connect(\"./rbo.sqlite\") # connect to database\n  create(db, \"subscribers\", [s]) # save subscriber in database\nend\n\n# activate remote_body for the new function\ntx1, rx1 = remote_body(d[\"test_sshd2\"], f1)\n\n# create and save the subscriber Donald Duck\nput!(tx1, \"Donald Ducky\")\n\n# the display routine\n@async while true\n\tif isready(rx1)\n  \t@show take!(rx1)\n  else\n    wait(rx1)\n  end\nend\n\n# define a new function for displaying all subscribers\n@everywhere f2(x) = begin\n\tdb = connect(\"./rbo.sqlite\") # connect to database\n\tgather(db, x) # list all items in table x\nend\n\n# activate remote_body for the new function\ntx2, rx2 = remote_body(d[\"test_sshd2\"], f2)\n\n# All subscribers in the table subscribers\nput!(tx2, \"subscribers\")\n\n# the display routine\n@async while true\n\tif isready(rx2)\n  \t@show take!(rx2)\n  else\n    wait(rx2)\n  end\nend\n\n# Remove process\nrmprocs(d[\"test_sshd2\"])\n\n# Remove key from dictionary\ndelete!(d, \"test_sshd2\")\n","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapterx20/#.-Use-the-RbO.jl-documentation-1","page":"20. Using Remote Channels (old stuff)","title":"3. Use the RbO.jl documentation","text":"","category":"section"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Use the documentation to do the next steps.","category":"page"},{"location":"chapterx20/#","page":"20. Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"Step Action Comment\n1 Use the command connect to create a link to the on-disk database rbo.sqlite \n2 Use the command 'gather' to retieve data from the SQL table subscribers ","category":"page"},{"location":"references/#References-1","page":"References","title":"References","text":"","category":"section"},{"location":"references/#Course-modules-1","page":"References","title":"Course modules","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"AppliGeneralLedger\nAppliSales\nAppliInvoicing\nAppliMaster","category":"page"},{"location":"references/#Julia-1","page":"References","title":"Julia","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Think Julia\nThe Emergent Features of JuliaLang: Part I\nThe Emergent Features of JuliaLang: Part II - Traits\nParallel Computing\nNaelsonDouglas/DistributedMachineLearningThesis\nBlue: a Style Guide for Julia\nPerformance Tips\nJulia Tutorial\nJuliaCon 2020 | Building Microservices and Applications in Julia","category":"page"},{"location":"references/#Julia-Debugging-1","page":"References","title":"Julia Debugging","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"A Julia interpreter and debugger","category":"page"},{"location":"references/#Julia-Unicode-1","page":"References","title":"Julia Unicode","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Unicode Input","category":"page"},{"location":"references/#Julia-Wikibooks-1","page":"References","title":"Julia Wikibooks","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Index\nIntroducing Julia/Types\nIntroducing Julia/DataFrames\nIntroducing Julia/Working with dates and times","category":"page"},{"location":"references/#Julia-Machine-Learning-1","page":"References","title":"Julia Machine Learning","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Data science for managers: Programming languages\nJulia Machine Learning for Slowpokes","category":"page"},{"location":"references/#Julia-Package-Manger-1","page":"References","title":"Julia Package Manger","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"A Brief Introduction to Package Management with Julia 1.0\nCreating Packages\nPkg + BinaryBuilder – The Next Generation\nOverview popular Julia packages","category":"page"},{"location":"references/#IJulia-1","page":"References","title":"IJulia","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Running a notebook server","category":"page"},{"location":"references/#Atom/Juno-Documentation-1","page":"References","title":"Atom/Juno Documentation","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Juno Documentation\nFrom zero to Julia! Using Docker\nAuto Cue","category":"page"},{"location":"references/#Docker-1","page":"References","title":"Docker","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Dockerize an SSH service\nssh key generation using dockerfile\nMultiple Computer Example\nRunning the \"Real Time Voice Cloning\" project in Docker\nHow To Install Docker On Raspberry Pi","category":"page"},{"location":"references/#Miscellaneous-[This-AI-Clones-Your-Voice-After-Listening-for-5-Seconds](https://www.youtube.com/watch?v0sR1rU3gLzQ-and-t148s)-1","page":"References","title":"Miscellaneous- This AI Clones Your Voice After Listening for 5 Seconds","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Julia Computing and NVIDIA Bring Julia GPU Computing to Arm\nOptimizing Serial Code","category":"page"},{"location":"chapterx5/#.-Creating-modules-1","page":"5. Creating modules","title":"5. Creating modules","text":"","category":"section"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapterx5/#What-you-will-learn-1","page":"5. Creating modules","title":"What you will learn","text":"","category":"section"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"Pages = [\"chapter5.md\"]","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"With modules we can build applications. A module is a demarcated unit, with its own namespace. You create a module with the package manages command generate, as we did during step 5 in the activity of the previous chapter.","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"The command created tho next:","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"Project.toml\nsrc/AppliInvoicing.jl","category":"page"},{"location":"chapterx5/#AppliAR.jl-1","page":"5. Creating modules","title":"AppliAR.jl","text":"","category":"section"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"module AppliAR #1\n\ngreet() = print(\"Hello World!\") #2\n\nexport create, process, retrieve_unpaid_invoices, read_bank_statements \\#3\n\ninclude(\"./infrastructure/infrastructure.jl\") #4\n\nend # module\n","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"#1 The module block with its name.","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"#2 Initial the only statements, can be removed.","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"#3 The functions that other programs can use.","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"#4 The path to our model.","category":"page"},{"location":"chapterx5/#Exports-1","page":"5. Creating modules","title":"Exports","text":"","category":"section"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"Exports are the interface to the module. Here you mention the function from the API and infrastructure layers. I don't export elements from the domain; one can use the import statement when a reference is necessary.","category":"page"},{"location":"chapterx5/#Dependencies-1","page":"5. Creating modules","title":"Dependencies","text":"","category":"section"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"The file Project.toml contains the base information of the module and the dependencies.","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"name = \"AppliInvoicing\"\nuuid = \"3941c6da-33b5-11ea-2884-afa98fed5e3b\"\nauthors = [\"Rob Bontekoe <rbontekoe@appligate.nl>\"]\nversion = \"0.2.0\"\n\n[deps]\nAppliGeneralLedger = \"153ef306-36d1-11ea-1f0d-e3f38f84e10d\"\nAppliSales = \"a1ddd20a-2e39-11ea-38f9-6b919ef027c3\"\nCSV = \"336ed68f-0bac-5ca0-87d4-7b16caf5d00b\"\nDataFrames = \"a93c6f00-e57d-5684-b7b6-d8193f3e46c0\"\nDates = \"ade2ca70-3891-5945-98fb-dc099432e06a\"\nLogging = \"56ddb016-857b-54e1-b83d-db4d58db5568\"\nSQLite = \"0aa819cd-b072-5ff4-a722-6bc24af294d9\"\nTest = \"8dfed614-e22c-5e08-85e1-65c5234f0b40\"","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"Initial is the section [deps] empty. Dependencies are automatically if you activate the project mode with: ] activate ./ and add a package.","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"Use update in this mode to receive the latest package versions.","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"Use remove to delete a package from the list.","category":"page"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"Use gc to remove unnecessary stuff.","category":"page"},{"location":"chapterx5/#GitHub-1","page":"5. Creating modules","title":"GitHub","text":"","category":"section"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"In chapter 4 you learned how to create a Julia package at GitHub.","category":"page"},{"location":"chapterx5/#Download-a-package-1","page":"5. Creating modules","title":"Download a package","text":"","category":"section"},{"location":"chapterx5/#","page":"5. Creating modules","title":"5. Creating modules","text":"To add a package that is not registered at Julialang, you use command add followed by the (git) package name , e.g. add https://github.com/rbontekoe/AppliGeneralLedger.jl.","category":"page"},{"location":"chapter1/#.-The-Application-1","page":"1 - The Application","title":"1. The Application","text":"","category":"section"},{"location":"chapter1/#The-Application-Architecture-1","page":"1 - The Application","title":"The Application Architecture","text":"","category":"section"},{"location":"chapter1/#","page":"1 - The Application","title":"1 - The Application","text":"Before we will look at the module AppliAR.jl we begin with building the module Accounts in chapter 2 to gain some experience.","category":"page"},{"location":"chapter1/#","page":"1 - The Application","title":"1 - The Application","text":"AR is short for Accounts Receivable. We test the module with two supporting packages: AppliSales.jl and AppliGeneralLedger.jl.","category":"page"},{"location":"chapter1/#","page":"1 - The Application","title":"1 - The Application","text":"The application architecture is based on the actor model. The article The actor model in 10 minutes explains the model very well. The link comes from the Rocket.jl documentation, the package we use to test our AppliAR.jl module.","category":"page"},{"location":"chapter1/#","page":"1 - The Application","title":"1 - The Application","text":"                           StmActor\n                              |\n                              | BankStatement(s)\n                              ↓       \n       SalesActor -------> ARActor -------> GLActor\n                  Order(s)    ↑    Entry(s)    ↑\n                              ↓                ↓\n                            Store            Store","category":"page"},{"location":"chapter1/#","page":"1 - The Application","title":"1 - The Application","text":"Fig 1. The application architecture.","category":"page"},{"location":"chapter1/#","page":"1 - The Application","title":"1 - The Application","text":"The SalesActor uses the AppliSales package to send the orders to the ARActor.\nThe StmActor reads a CSV file with bank statements and sends them to the ARActor.\nThe ARActor (Accounts Receivable) uses the AppliAR.jl module to process orders and bank statements and sends journal entries to the GLActor.\nGLActor uses the AppliGeneralLedger package and turns journal entries into general ledger statements.","category":"page"},{"location":"chapter1/#","page":"1 - The Application","title":"1 - The Application","text":"I use the word package for an official registered Julia module.","category":"page"},{"location":"chapter1/#","page":"1 - The Application","title":"1 - The Application","text":"A module is Julia code with a clearly defined boundary. We use the onion architecture to achieve it. The peels Domain, API, and Infrastructure are defined as sub-modules.","category":"page"},{"location":"chapter1/#","page":"1 - The Application","title":"1 - The Application","text":"The example on AppliAR.jl page shows the case with docker containers.","category":"page"},{"location":"chapter1/#","page":"1 - The Application","title":"1 - The Application","text":"Before we discuss the application, you can gain some experience with building a module called Accounts.","category":"page"},{"location":"chapter13/#.-Running-the-Containers-1","page":"13 - Running the Containers","title":"13. Running the Containers","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter13/#Contents-1","page":"13 - Running the Containers","title":"Contents","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Pages = [\"chapter13.md\"]","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"In chapter 13, we combine what we have learned in chapter 6, Testing the application and chapter 12 Creating SSH enabled Containers. We use the the packages AppliSales, AppliInvoicing, and AppliGeneralLedger. In the container test_sshd we use AppliSales, and AppliInvoicing, and in test_sshd2 we use AppliGeneralLedger. We will discover that the general ledger data will be stored in a file on test_sshd2.","category":"page"},{"location":"chapter13/#Activity-1:-1","page":"13 - Running the Containers","title":"Activity 1:","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"We start with cloning the code from AppliMaster on GitHub.","category":"page"},{"location":"chapter13/#Activity-2:-1","page":"13 - Running the Containers","title":"Activity 2:","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Create the application.","category":"page"},{"location":"chapter13/#Activity-1:-Cloning-the-code-1","page":"13 - Running the Containers","title":"Activity 1: Cloning the code","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Prerequisites:","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Docker is installed on your computer.\nYou have the two containers test_sshd and test_sshd2 created in chapter 9, Create the Container.\nBoth containers are SSH enabled.\nYou have a Internet connection to download the all the modules we need.","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Steps:","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Start both containers and check their Docker internal IP-address.\nUse SSH to connect from testsshd to testsshd2 and install our modules in both containers.\nCreate the program.","category":"page"},{"location":"chapter13/#Step-1.1-Start-both-containers-1","page":"13 - Running the Containers","title":"Step 1.1 - Start both containers","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Step Action Comment\n1 $ docker start test_sshd \n2 $ docker start test_sshd2 \n3 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd e.g. 172.17.0.2\n4 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd2 e.g. 172.17.0.3","category":"page"},{"location":"chapter13/#Step-1.2-Use-SSH-to-connect-from-test_sshd-to-test_sshd2-and-install-the-out-modules-1","page":"13 - Running the Containers","title":"Step 1.2 - Use SSH to connect from test_sshd to test_sshd2 and install the out modules","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Step Action Comment\n1 $ ssh rob@172.17.0.2 Enter the container test_sshd.\n2 $ julia Start Julia.\n3 julia> ] Go to the package manager.\n4 pkg> add https://github.com/rbontekoe/AppliSales.jl Install AppliSales.jl.\n5 pkg> add https://github.com/rbontekoe/AppliInvoicing.jl Install AppliInvoicing.jl.\n6 pkg> add https://github.com/rbontekoe/AppliGeneralLedger.jl Install AppliGeneralLedger.jl.\n7 Ctrl-C Return to REPL prompt.\n8 Ctrl-D Leave Julia.\n9 $ ssh rob@172.17.0.3 Enter the container test_sshd2.\n10 Repeat step 5, 6, and 7 All our packages are available in test_sshd2.\n11 Leave the container test_sshd2. ","category":"page"},{"location":"chapter13/#Step-1.3-Clone-AppliMaster-1","page":"13 - Running the Containers","title":"Step 1.3 - Clone AppliMaster","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Step Action Comment\n1 $ git clone https://github.com/rbontekoe/Master.jl.git A folder AppliMaster.jl will be created.\n2 $ ls \n3 Ctrl-D Leave the container.","category":"page"},{"location":"chapter13/#Activity-2:-Create-the-application-1","page":"13 - Running the Containers","title":"Activity 2: Create the application","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Prerequisites:","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Docker is installed on your computer.\nYou have the two containers testsshd and testsshd2 created in Chapter 9, Create the Container.\nBoth containers are SSH-enabled.\nJulia is installed in the directory julia on the containers.\nThe AppliSales, AppliInvoicing, and AppliGeneralLedger packages are installed in both containers.","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Steps","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Start the container test_sshd and create main.jl with nano.\nRun the application.","category":"page"},{"location":"chapter13/#.-Start-the-container-test_sshd-and-test_sshd2-1","page":"13 - Running the Containers","title":"1. Start the container test_sshd and test_sshd2","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Step Action Comment\n1 $ docker start test_sshd Start the first container.\n2 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd Displays docker address, eg, 172.17.0.2.\n3 Take a note of the ip-address of test_sshd \n4 $ docker start test_sshd2 Start the second container.\n5 Take a note of the ip-address of test_sshd2 \n6 $ ssh rob@172.17.0.2 Use the ip-address step 2.\n7 $ julia Start Julia, and continue at step 8 of Activity 2: Test the code","category":"page"},{"location":"chapter13/#Example-test-code-1","page":"13 - Running the Containers","title":"Example test code","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Step Action Comment\n1 Create a file app_functions.jl In test_sshd.\n2 Put the code from AppliMaster.jl in the file \n3 Start julia \n4 Run the next (initialization) code first ","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"julia> using Distributed\n\njulia> p = addprocs([(\"rob@172.17.0.3\", 1)]; exeflags=`--project=$(Base.active_project())`)\n1-element Array{Int64,1}:\n 2\n\njulia> p = p[1] #container used for invoicing\n\njulia> q = p[1] # container used for general ledger\n\njulia> @everywhere using AppliSales\n\njulia> @everywhere using AppliInvoicing\n\njulia> @everywhere using AppliGeneralLedger\n\njulia> include(\"./app_functions.jl\");\n\njulia> rx = dispatcher()\n[ Info: task_0 is waiting for data\n[ Info: task_1 is waiting for data\n[ Info: task_2 is waiting for data\n[ Info: task_3 is waiting for data\nChannel{Any}(sz_max:32,sz_curr:0)","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Step Action Comment\n5 Run the next codel ","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"julia> put!(rx, \"START\"); # start the application\n\n\njulia> stms = AppliInvoicing.read_bank_statements(PATH_CSV); # retrieve data\n\njulia> put!(rx, stms); # processing the uppaid invoices","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"When run the code again, you will experience that it is very fast. Best is to delete first the data stores:","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Step Action Comment\n6 ;ssh rob@172.17.0.3 Go to test_ssh2.\n7 ;rm invoicing.sqlite journal.txt ledger.txt Delete the stores.\n8 Ctrl-D Leave the container.\n9 Run the previous code again ","category":"page"},{"location":"chapter13/#The-result-(statementrs-removed)-1","page":"13 - Running the Containers","title":"The result (statementrs removed)","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"[ Info: Dispatcher received String\n[ Info: task_0 received String\n[ Info: task_0 will start the process remotely\n\n[ Info: task_0 will put 3 the orders on rx channel\n[ Info: task_0 is waiting for data\n\n[ Info: Dispatcher received Array{AppliSales.Order,1}\n[ Info: Task 1 will put 3 orders on rx channel\n[ Info: task_1 is waiting for data\n\n[ Info: Dispatcher received Array{AppliGeneralLedger.JournalEntry,1}\n[ Info: task_2: Processing journal entries\n[ Info: task_2 is waiting for data\n\n[ Info: Dispatcher received Array{AppliInvoicing.BankStatement,1}\n[ Info: Task_3: Processing unpaid invoices\n[ Info: Retrieved 3 unpaid invoices\n[ Info: task_3 is waiting for data\n\n[ Info: Dispatcher received Array{AppliGeneralLedger.JournalEntry,1}\n[ Info: task_2: Processing journal entries\n[ Info: task_2 is waiting for data","category":"page"},{"location":"chapter13/#Unkown-data-will-not-be-routed!-1","page":"13 - Running the Containers","title":"Unkown data will not be routed!","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"Step Action Comment\n10 Run the code in step 5 again ","category":"page"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"test = \"Test unkown type\";\n\nput!(rx, test); # unkown type error","category":"page"},{"location":"chapter13/#Result-1","page":"13 - Running the Containers","title":"Result","text":"","category":"section"},{"location":"chapter13/#","page":"13 - Running the Containers","title":"13 - Running the Containers","text":"[ Info: Dispatcher received String\n\n┌ Warning: No task found for type String\n└ @ Main ~","category":"page"},{"location":"chapter4/#.-Create-and-Test-API.jl-1","page":"4 - Create and Test API.jl","title":"4. Create and Test API.jl","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"In this chapter, you define the functions that one can use to write a software program.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"In this case, it is the function create that we use to create:","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"an address.\na person.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"Julia's functions are dispatch-able. Julia looks for the right method based on the number of arguments and their data-type.","category":"page"},{"location":"chapter4/#Contents-1","page":"4 - Create and Test API.jl","title":"Contents","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"Pages = [\"chapter4.md\"]","category":"page"},{"location":"chapter4/#API.jl-1","page":"4 - Create and Test API.jl","title":"API.jl","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"module API #1\n\nimport ..Accounts: Domain #2\n\nusing .Domain #3\n\nexport create #4\n\n\"\"\"\n    create(address_type::AddressType, address::String)::Address\n    create(name::String, addresses::Array{Address,1})::Person\n    create(name::String)::Person\n\nCreate an Address or a Person object.\n\n# Example\n`````\njulia> address_email = create(EMAIL, \"donald@duckcity.com\")\n\njulia> donald = create(\"Donald Duck\", [address_email])\n`````\n\"\"\"\nfunction create end #5\n\ncreate(address_type::AddressType, address::String)::Address = Address(address_type, address) #6\n\ncreate(name::String, addresses::Array{Address,1})::Person = Person(name, addresses) #7\n\ncreate(name::String)::Person = Person(name) #8\n\nend","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"#1 The module name is API.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"#2 The API sub-module uses only the elements that are defined in the sub-module Domain, Julia, and any loaded packages. ..Accounts refers to the main-module of API. import ..Accounts: Domain give us a reference to the sub-module Domain, so we can use it in the next statement.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"#3 The code instantiates the sub-module Domain (using .Domain). The dot tells Julia that Domain is a sub-module. Julia loads all exported elements of Domain (Person, Address, AddressType, EMAIL, and WORK) into the scope of the module because we specify using. If we would use import instead of using, we also have to mention the module name (e.g. Domain.EMAIL). Now, we can call them without mentioning the name of the sub-module.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"#4 We export the create methods. It means that other modules and programs can use them directly unless it conflicts with similar names.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"#5 Here, we document the different use cases (methods) of the function create. One calls it multiple dispatch and it can be compared to overloading in Object-Oriented programming languages.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"The methods must be indented and their signatures must be different. A signature is determined by the number of arguments and their data-types.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"When users type a question mark followed by the function-name (? create) then Julia displays the text and the example. Run the example code by pasting it into the REPL, including the julia>-prompts.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"warning: Warning\nThe five (5) back-tics surrounding the example code have to be replaced by three (3) back-tics.I had to use five back-tics to avoid conflicts in the mark-down language.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"#6 The method create when we want to create an Address. (address_type::AddressType, address::String) is its signature.  Address(address_type, address) is the constructor of the data-type Address that we have defined in Domain.jl.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"#7 The method create when we want to create a Person with one or more addresses. addresses::Array{Address,1} specifies that the argument must be a one-dimensional array with Address objects.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"#8 This line creates a Person with an empty Address array. Although the object Person is not mutable, we can still add elements to the array. For example push!(donald.addresses, <Address object>).","category":"page"},{"location":"chapter4/#Accounts.jl-1","page":"4 - Create and Test API.jl","title":"Accounts.jl","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"module Accounts\n\n#export EMAIL, WORK # Domain\n#export create # API\n\ninclude(\"Domain.jl\"); using .Domain\ninclude(\"API.jl\"); using .API\n\nend","category":"page"},{"location":"chapter4/#test_api.jl-1","page":"4 - Create and Test API.jl","title":"test_api.jl","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"using Pkg; Pkg.activate(\".\")\n\nimport Accounts: Domain, API\n\nusing .Domain, .API\n\ndonald_email = create(EMAIL, \"donald@duckcity.com\")\ndonald_work = create(WORK,\n  \"\"\"\n  Donalds Hardware Store\n  attn. Donald Duck\n  1190 Seven Seas Dr\n  FL 32830 Lake Buena Vista\n  USA\n  \"\"\"\n)\n\naddresses = [donald_email, donald_work]\n\ndonald = create(\"Donald Duck\", addresses)\n\nprintln(donald)","category":"page"},{"location":"chapter4/#runtests.jl-1","page":"4 - Create and Test API.jl","title":"runtests.jl","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"using Accounts\nusing Test\n\nimport Accounts: Domain, API\nusing .Domain, .API\n\n@testset \"Domain.jl\" begin\n    donald_email = Address(EMAIL, \"donald@duckcity.com\")\n    donald = Person(\"Donald duck\", [donald_email])\n    email_addresses = filter(x -> x.address_type == EMAIL, donald.addresses)\n    @test email_addresses[1].address == \"donald@duckcity.com\"\nend\n\n@testset \"API.jl\" begin\n    donald_email = Address(EMAIL, \"donald@duckcity.com\")\n    donald = Person(\"Donald Duck\", [donald_email])\n    email_addresses = filter(x -> x.address_type == EMAIL, donald.addresses)\n    @test email_addresses[1].address == \"donald@duckcity.com\"\nend","category":"page"},{"location":"chapter4/#Exercise-4.1-Adding-the-Sub-module-API.-1","page":"4 - Create and Test API.jl","title":"Exercise 4.1 - Adding the Sub-module API.","text":"","category":"section"},{"location":"chapter4/#Prerequisites-1","page":"4 - Create and Test API.jl","title":"Prerequisites","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"Previous activities.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"In this exercise you create the sub-module API. You can apply everything you've learned so far.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"Create the file API.jl and add the code of section API.jl to the file. Change the five back-tics into three back-tics. Remove the comments.\nCopy the code of section runtests.jl to the file runtests.jl.\nModify  Accounts.jl according to section Accounts.jl.\nCreate the file test_api.jl and paste the code of section test_api.jl into it. Test the code.\nGo to the package manager, activate the Accounts module (]activate .) and run the tests (test Accounts). You should see:","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"Test Summary: | Pass  Total\nDomain.jl     |    1      1\nTest Summary: | Pass  Total\nAPI.jl        |    1      1\n    Testing Accounts tests passed","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"Return to the julia-prompt and type: ? create. The help text of the function create is displayed.","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"help?> create\nsearch: create searchsortedlast\n\n  create(address_type::AddressType, address::String)::Address\n  create(name::String, addresses::Array{Address,1})::Person\n  create(name::String)::Person\n\n  Create an Address or a Person object.\n\n  Example\n  ≡≡≡≡≡≡≡≡≡\n\n  julia> address_email = create(EMAIL, \"donald@duckcity.com\")\n\n  julia> donald = create(\"Donald Duck\", [address_email])","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"Push the changes to your GitHub repository. Check the changes on GitHub.\nGo to the Accounts folder cd ~/.julia/dev/Accounts and and type git log --oneline. You sloud see:","category":"page"},{"location":"chapter4/#","page":"4 - Create and Test API.jl","title":"4 - Create and Test API.jl","text":"~/.julia/dev/Accounts$ git log --oneline\n3b1af29 (HEAD -> master) Add API.jl sub-module\nc76901f (origin/master) Add Domain.jl sub-module\n0cf05da Files generated by PkgTemplates\n82338c3 Initial commit","category":"page"},{"location":"chapterx3/#.-Experimenting-with-Modules-1","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapterx3/#Contents-1","page":"3. Experimenting with Modules","title":"Contents","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Pages = [\"chapter3.md\"]","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"In chapter 2, we saw the design of the AppliAR module. In this chapter, we will implement it, the AppliAR(.jl) module and its sub-modules Domain(.jl), API(.jl), and Infrastructure(.jl). Two packages that we will use are AppliSales and AppliGeneralLedger.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"The AppliSales package supplies the orders that AppliAR module needs to create the invoices when a course starts. Besides sending and storing the invoices, it also creates the journal entries for the AppliGeneralLedger package.","category":"page"},{"location":"chapterx3/#Course-Example-1","page":"3. Experimenting with Modules","title":"Course Example","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Initial, we will build an application where we can register and retrieve persons. The module you can experiment with is Accounts.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"In this chapter, we start with the setup of the development environment by creating the module Accounts.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Next, you will use the Onion Architecture to define the model which consists of the layers Domain, API, and Infrastructure. The layers are declared as sub-modules.","category":"page"},{"location":"chapterx3/#Domain-1","page":"3. Experimenting with Modules","title":"Domain","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"The domain has objects Person, Address, AddressType.","category":"page"},{"location":"chapterx3/#API-1","page":"3. Experimenting with Modules","title":"API","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"The API has the function create. It can be used for creating persons and the addresses.","category":"page"},{"location":"chapterx3/#Infrastructure-1","page":"3. Experimenting with Modules","title":"Infrastructure","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"The Infrastructure has the functions save and retrieve, to save and retrieve persons.","category":"page"},{"location":"chapterx3/#Activity-3.1-Setup-the-Development-Environment-1","page":"3. Experimenting with Modules","title":"Activity 3.1 - Setup the Development Environment","text":"","category":"section"},{"location":"chapterx3/#Prerequisites-1","page":"3. Experimenting with Modules","title":"Prerequisites","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Ubuntu 20.04.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"In this activity you will create the development environment.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Install Julia.\nInstall Atom.\nInstall Juno.\nAdd the Julia package PkgTemplates.\nCreate the basic application file structure for module Accounts using PkgTemplates.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Step Action Comment\n1 Install Julia Follow the Installation instructions.\n2 Install Git \n3 Install Atom \n4 Install Juno \n5 Close Atom \n6 $ cd projects \n6 $ julia Start Julia.\n7 julia> ] Go to the package manager.\n8 pkg> add PkgTemplates Install the PkgTemplates package.\n9 pkg> BackSpace Back to Julia REPL.\n10 julia> using PkgTemplates <enter> Load PkgTemplates.\n11 julia> t = template() <enter> Create a default template.\n12 julia> t(\"AppliAR\") <enter> Create the module AppliAR.\n13 julia> Ctrl-D Exit Julia\n14 $ cd ~/.julia/dev/AppliAR Go to the development folder.\n15 $ atom . Start Atom.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Explore the file structure.","category":"page"},{"location":"chapterx3/#Activity-3.2-Create-the-Application-Environment-1","page":"3. Experimenting with Modules","title":"Activity 3.2 - Create the Application Environment","text":"","category":"section"},{"location":"chapterx3/#Prerequisites-2","page":"3. Experimenting with Modules","title":"Prerequisites","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Ubuntu 20.04 installed.\nJulia 1.5 installed.\nAtom/Juno installed.\nGit installed.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Step Action Comment\n1 Ctrl+Alt-T Create a terminal window.\n2 cd projects \n3 julia Start Julia.\n4 julia> using PkgTemplates Load PkgTemplates.\n5 julia> t = Template() Create a default template.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"  authors: [\"Rob Bontekoe <rbontekoe@appligate.nl> and contributors\"]\n  dir: \"~/.julia/dev\"\n  host: \"github.com\"\n  julia: v\"1.0.0\"\n  user: \"rbontekoe\"\n  plugins:\n    CompatHelper:\n      file: \"~/.julia/packages/PkgTemplates/aXRp5/templates/github/workflows/CompatHelper.yml\"\n      destination: \"CompatHelper.yml\"\n      cron: \"0 0 * * *\"\n    Git:\n      ignore: String[]\n      name: nothing\n      email: nothing\n      branch: nothing\n      ssh: false\n      jl: true\n      manifest: false\n      gpgsign: false\n    License:\n      path: \"~/.julia/packages/PkgTemplates/aXRp5/templates/licenses/MIT\"\n      destination: \"LICENSE\"\n    ProjectFile:\n      version: v\"0.1.0\"\n    Readme:\n      file: \"~/.julia/packages/PkgTemplates/aXRp5/templates/README.md\"\n      destination: \"README.md\"\n      inline_badges: false\n    SrcDir:\n      file: \"~/.julia/packages/PkgTemplates/aXRp5/templates/src/module.jl\"\n    TagBot:\n      file: \"~/.julia/packages/PkgTemplates/aXRp5/templates/github/workflows/TagBot.yml\"\n      destination: \"TagBot.yml\"\n      cron: \"0 0 * * *\"\n      token: Secret(\"GITHUB_TOKEN\")\n      ssh: Secret(\"DOCUMENTER_KEY\")\n      ssh_password: nothing\n      changelog: nothing\n      changelog_ignore: nothing\n      gpg: nothing\n      gpg_password: nothing\n      registry: nothing\n      branches: nothing\n      dispatch: nothing\n      dispatch_delay: nothing\n    Tests:\n      file: \"~/.julia/packages/PkgTemplates/aXRp5/templates/test/runtests.jl\"\n      project: false","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Step Action Comment\n5 julia> t(\"Accounts\") Create application environment.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"[ Info: Running prehooks\n[ Info: Running hooks\n Activating environment at `~/.julia/dev/Accounts/Project.toml`\n   Updating registry at `~/.julia/registries/General`\n######################################################################## 100,0%\nNo Changes to `~/.julia/dev/Accounts/Project.toml`\nNo Changes to `~/.julia/dev/Accounts/Manifest.toml`\n Activating environment at `~/.julia/environments/v1.5/Project.toml`\n[ Info: Running posthooks\n[ Info: New package is at /home/rob/.julia/dev/Accounts","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Step Action Comment\n6 julia> Ctrl-D exit Julia.\n7 $ cd ~/.julia/dev/Accounts/ Got to development folder.\n8 $ atom . Start Atom/Juno.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"You will see the following file structure.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"ᵥ📁 Accounts\n   📁 .git\n   📁 .github\n  ᵥ📁 src\n     📄 Accounts.jl\n  ᵥ📁 test\n     📄 runtests.jl\n   📄 .gitignore\n   📄 LICENCE\n   📄 Manifest.toml\n   📄 Project.toml\n   📄 README.md","category":"page"},{"location":"chapterx3/#Activity-3.3-Create-a-Repository-on-GitHub-1","page":"3. Experimenting with Modules","title":"Activity 3.3 - Create a Repository on GitHub","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Ubuntu 20.04 installed.\nJulia 1.5 installed.\nAtom/Juno installed.\nGit installed.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Step Action Comment\n1 Go to GitHub Create an account if you don't have one. What is GitHub?\n2 Click on the tab Repositories \n3 Click on the green button New \n4 Give the repository the name Accounts.jl \n5 Give the repository a description E.g. A module for the BAWJ course with which you can experiment.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"warning: Warning\nStart with a empty repository!","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Step Action Comment\n6 Click on the green button Create repository Button is located at the bottom side.\n7 Return to your computer and go to the folder ~/.julia/dev/Accounts \n10 $ git status The response is:","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"On branch master\nnothing to commit, working tree clean","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Step Action Comment\n11 $ atom . Start Atom/Juno.\n12 Click on the Publish button You will find the button in the lower right corner.\n13 Check the update on GitHub You should see the same file structure. Manifest.toml is missing.","category":"page"},{"location":"chapterx3/#Create-the-sub-module-Domain.jl-in-the-src-folder-1","page":"3. Experimenting with Modules","title":"Create the sub-module Domain.jl in the src-folder","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Step Action Comment\n1 Go to the ~/.julia/dev/Accounts folder \n3 Remove all Taps in the right pane. \n4 Right click on: src \n5 Select: New file \n6 Type: Domain.jl A file that represents a module starts with a capital letter.\n7 Press: <Enter> A new document appears in the pane next to the navigation pane.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"In the navigation pane you see the next folders and files:","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"ᵥ📁 AppliInvoicing\n  ᵥ📁 src\n     📄 Accounts.jl\n     📄 Domain.jl","category":"page"},{"location":"chapterx3/#Domain.jl-1","page":"3. Experimenting with Modules","title":"Domain.jl","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"On the Domain page, you define the custom data structures that make-up your domain.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"To define a data structure and type, use the keyword struct. The body consists of the fields of the data structure. A struct is a non-mutable object unless you use the preceding keyword mutable.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Use constructors to define standard values. It simplifies the creating op the object.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"module Domain #1\n\nusing Dates #2\n\nexport Person, Address, AddressType, EMAIL, WORK #3\n\n# local function to generate a unique id\ncreate_key(name::String) = string(hash(name * string(time()))) #4\n\n# enumerated type for an address.\n@enum AddressType EMAIL WORK #5\n\nstruct Address #6\n  id::String\n  created::DateTime\n  address_type::AddressType\n  address::String\n  #constructors\n  Address(address_type, address) = new(create_key(address), now(), address_type, address)\nend # Address\n\nstruct Person #7\n  id::String\n  created::DateTime\n  name::String\n  addresses::Array{Address, 1}\n  #constructors\n  Person(name) = new(create_key(name), name, [])\n  Person(name, addresses) = new(create_key(name), now(), name, addresses)\nend\n\nend\n","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#1 Module names start with a capital letter.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#2 If you need date functions like time(), date(), or now() you have the load the Dates package.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#3 Define what other (sub-)modules default see when they want to use the sub-module Domain.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#4 We use the hash function to generate an unique id.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#5 The AddressTypes that you allow in an address.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#6 The structure of the Address datatype. The constructor create allows the programmer to only specify the AddressType and the address. The fields id and created are generated by Julia code.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#7 The Person datatype. The fields id and created are generated by Julia code. When you don't specify an address, the software creates an empty array. Later on, you can add addresses using the push! function.","category":"page"},{"location":"chapterx3/#Exercice-3.4-Adding-Dates-module-as-dependency-1","page":"3. Experimenting with Modules","title":"Exercice 3.4 - Adding Dates module as dependency","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"The Domain.jl code","category":"page"},{"location":"chapterx3/#Prerequisites-3","page":"3. Experimenting with Modules","title":"Prerequisites","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Exercise 3.1, 3.2, and 3.3","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"| Step | Action | Comment | | :–- | :–- | :–- |","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Copy the domain data to the Domain.jl file in Juno.\nSelect the first statement and press Shift-Enter¹. Juno evaluates the line and prints the result at the end of it. Repeat it for all elements.\nSave the file with Ctrl-S.\nCreate a folder api under the scr-folder.\nCreate the empty file api.jl in the folder api.\nCreate the empty files infrastructure.jl and db.jl in the folder 'infrastructure.'","category":"page"},{"location":"chapterx3/#Notes-1","page":"3. Experimenting with Modules","title":"Notes","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"¹ In Juno pressing Shift-Enter executes the selected statement and moves the cursor to the next piece of code. Ctrl-Enter doesn't touch the cursor.","category":"page"},{"location":"chapterx3/#api.jl-1","page":"3. Experimenting with Modules","title":"api.jl","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"In the API, we only use Julia code and the elements from the domain, the basic idea behind the onion architecture.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"We use the include statement to have access to the domain elements. The relative path is to the domain.jl file.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"We define in the API the functions and the methods that our program needs.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Functions start with the keyword function followed by the function name and the arguments between brackets:","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"function hello(name)\n\tprintln(\"Hello \" * name) # the * is also used for string concatenation\nend","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Methods start with the name of the method followed by the arguments between brackets, an equal sign, and a statement:","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"hello(name) = println(\"Hello \" * name)","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"When a method has more than one statement, we embed the statements between a begin ... end block:","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"hello(name) = begin\n\tname = uppercase(name)\n\tprintln(\"HELLO \" * name)\nend","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"There is no difference between functions and methods.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"include(\"../domain/domain.jl\") #1\n\nimport AppliSales.Order # Order is not exported but is refered to in the next method #2\n\n# create unpaid invoices from an order\ncreate(order::Order, invoice_id::String)::UnpaidInvoice = begin #3\n    meta = MetaInvoice(order.id, order.training.id)\n    header_invoice = Header(\n        invoice_id, order.org.name, order.org.address, order.org.zip, order.org.city, order.org.country, order.order_ref, order.contact_name, order.contact_email)\n    body_invoice = OpentrainingItem(order.training.name, order.training.date, order.training.price, order.students)\n    return UnpaidInvoice(invoice_id, meta, header_invoice, body_invoice) #4\nend\n\n# create paid invoice from a bank statement\ncreate(invoice::UnpaidInvoice, stm::BankStatement)::PaidInvoice = begin\n    id = invoice.id\n    meta = invoice.meta\n    header = invoice.header\n    body = invoice.body\n    stm = stm\n    return PaidInvoice(id, meta, header, body, stm)\nend\n\n# create journal entries from an unpaid invoice\n# the create_journal_entry function is exported by AppliGeneralLedger\nfunction conv2entry(inv::UnpaidInvoice, from::Int, to::Int)\n    id = string(Date(now())) * \"-\" * string(global n += 1)\n    customer_id = inv.header.name\n    invoice_nbr = inv.header.invoice_nbr\n    debit = inv.body.price_per_student * length(inv.body.students)\n    credit = 0.0\n    vat = debit * inv.body.vat_perc\n    descr = inv.body.name_training\n    return create_journal_entry(id, customer_id, invoice_nbr, from, to, debit, credit, vat, descr)\nend\n\n# create journal entries from a paid invoice\n# the create_journal_entry function is exported by AppliGeneralLedger test module\nfunction conv2entry(inv::PaidInvoice, from::Int, to::Int)\n    id = string(Date(now())) * \"-\" * string(global n += 1)\n    customer_id = inv.header.name\n    invoice_nbr = inv.header.invoice_nbr\n    debit = inv.stm.amount\n    credit = 0.0\n    vat = 0.0\n    descr = inv.body.name_training\n    return create_journal_entry(id, customer_id, invoice_nbr, from, to, debit, credit, vat, descr)\nend","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#1 It loads the domain elements.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#2 I only export the api and infrastructure pages from modules. Exporting domain elements can give irritating override errors. In the first API-method, we refer to Order, which cannot found by Julia. To make it accessible, use the import statement.  ","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#3 As we mentioned before, Julia uses multiple dispatch as a kind of overloading we know from object-oriented languages. It means that you can use the same method or function name as long as the signatures are different. As you can see, we use the create method two times, one for creating unpaid invoices and one for paid invoices.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"When you use the help function ? create it shows the two.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#4 When the last statement of a function block is also the return value, you can leave out the keyword return.","category":"page"},{"location":"chapterx3/#infrastructure.jl-1","page":"3. Experimenting with Modules","title":"infrastructure.jl","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"The infrastructure layer, the outer peel of the onion, uses the elements from the api and the domain layers.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"The two methods that execute the workflow as we have described in our invoicing procedure are:","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"process(path, orders::Array{Order, 1})\nprocess(path, invoices::Array{UnpaidInvoice, 1}, stms::Array{BankStatement, 1})","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"The first method creates unpaid invoices, the second one the paid invoices. Both generate the journal entries for the general ledger.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Take a peek at chapter 6 Testing the application to get an idea how the data flows through the application.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"using CSV\nusing DataFrames\n\ninclude(\"../api/api.jl\")\ninclude(\"./db.jl\") # database functions\n\n@enum TableName begin\n    UNPAID\n    PAID\nend # enumerator for TableName types\n\n# get last statement number for today\nn = 0\n\nprocess(path, orders::Array{Order, 1}) = begin\n    # connect to db\n    db = connect(path)\n\n    # get last order number\n    invnbr = 1000 #ToDo\n\n    # create invoices\n    invoices = [create(order, \"A\" * string(invnbr += 1)) for order in orders]\n\n    # archive invoices\n    archive(db, string(UNPAID), invoices)\n\n    # create journal entries from invoices\n    return entries = [conv2entry(inv, 1300, 8000) for inv in invoices]\nend # process(path, orders::Array{Order, 1})\n\n#process(bankstm::Array(Bankstatement, 1) = begin\nprocess(path, invoices::Array{UnpaidInvoice, 1}, stms::Array{BankStatement, 1}) = begin\n    # connect to db\n    db = connect(path)\n\n    # create array with potential paid invoices based on received bank statements\n    potential_paid_invoices = []\n    for unpaid_invoice in invoices\n      for stm in stms # get potential paid invoices\n        if occursin(unpaid_invoice.id, stm.descr) # description contains invoice number\n          push!(potential_paid_invoices, create(unpaid_invoice, stm))\n        end\n      end\n    end\n\n    # convert to an array with PaidInvoice's\n    paid_invoices = convert(Array{PaidInvoice, 1}, potential_paid_invoices)\n\n    # archive PaidInvoice's\n    archive(db, string(PAID), paid_invoices)\n\n    # return array with JournalEntry's\n    return entries = [conv2entry(inv, 1150, 1300) for inv in paid_invoices]\nend # process(path, invoices::Array{UnpaidInvoice, 1}, stms::Array{BankStatement, 1})\n\nread_bank_statements(path::String) = begin\n    # read the CSV file containing bank statements\n    df = CSV.read(path) # returns a DataFrame\n\n    # return an array with BankStatement's\n    # row[1] is the first value of row, row[2] the second value, etc.\n    return [BankStatement(row[1], row[2], row[3], row[4]) for row in eachrow(df)]\nend # read_bank_statements\n\nretrieve_unpaid_invoices(path)::Array{UnpaidInvoice, 1} = begin\n    # connect to db\n    db = connect(path)\n\n    # retrieve unpaid invoices as dataframe\n    unpaid_records = retrieve(db, string(UNPAID))\n\n    # convert the dataframe to an array with UnpaidInvoice's.\n    # row is an array with one element, which is an array.\n    # row[1] is the the content of the element, the UnpaidInvoice.\n    unpaid_invoices = [row[1] for row in eachrow(unpaid_records.item)]\n\n    # return the array with UnpaidInvoice's\n    return unpaid_invoices\nend # retrieve_unpaid_invoices","category":"page"},{"location":"chapterx3/#db.jl-1","page":"3. Experimenting with Modules","title":"db.jl","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"A microservice is responsible for his data. If we also see a module as an independent component, the same argument would apply. For the Invoicing module, these are the UnpaidInvoice and PaidInvoice objects.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"The db.jl page is based on SQLite.jl module. It translates a data structure into a row in a table whose column names match the argument names of the function. The store method performs this action.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Sometimes you want to save a data structure in a single cell, possibly with additional information. We use the data structure DatabaseItem to achieve this. The column item contains the data structure in the serialized form. Use the archive method for this purpose.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Reading rows results in a DataFrame. It is similar to a spreadsheet where you use column names. If we retrieve the data from a table, it has the advantage of reading the column item of the DataFrame results in an array.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"# db.jl\n\nusing SQLite\n\n# Database item\nstruct DatabaseItem{T}\n   time::Float64\n   agent::String\n   action::String\n   key::String\n   item::T\nend # DatabaseItem\n\n# createDatabaseItem - internal method\nconst agent = \"AB9F\"\ncreateDatabaseItem(item::Any; agent=agent, action=\"CREATE\") = DatabaseItem(time(), agent, action, item.id, item)\n\n# Connect with PATH_CSV\nconnect(path::String)::SQLite.DB = SQLite.DB(path)\n\n# connect to in-memory database\nconnect()::SQLite.DB = SQLite.DB()\n\n# archive an item as DatabaseItem\narchive(db, table::String, items::Array{T, 1} where {T <: Any}) = begin\n   # save items\n   dbi = [ createDatabaseItem( i ; action=\"CREATE\" ) for i in items]\n   # return as dataframe\n   DataFrame( dbi ) |> SQLite.load!(db, table)\nend # archive\n\n#store the fields of an item\nstore(db, table::String, items::Array{T, 1} where {T <: Any}) = begin\n   DataFrame( items ) |> SQLite.load!(db, table)\nend # store\n\n# retrieve all item from a table\nretrieve(db, table::String)::DataFrame = SQLite.Query( db, \"select * from $table\") |> DataFrame\n\n# retrieve item form a table based on a sql condition\nretrieve(db, table::String, condition::String )::DataFrame = SQLite.Query( db, \"select * from $table where $condition\")  |> DataFrame\n\n# run a custom function\nrunfunct(funct, x, y, z) = funct(x, y, z)","category":"page"},{"location":"chapterx3/#Exercice-4.2-1","page":"3. Experimenting with Modules","title":"Exercice 4.2","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"To save time we clone my Invoicing repository from GitHub.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Goto your base folder.\nRun thee command: git clone https://github.com/rbontekoe/AppliInvoicing.jl.git\nGoto the folder AppliInvoicing.jl: cd AppliInvoicing.jl\nStart Juno: atom .\nStart Julia.\nGoto the package manager: ]\nActivate the local environment (and don't forget the point .): activate .\nOpen the page test.jl.\nUse Shit-Enter to step door your code. You will see:","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"[ Info: 2020-02-04T12:02:13.613 - Test program started.\n[ Info: The database test_invoicing.sqlite will be removed permanently by the last two statements of this page.\n[ Info: 2020-02-04T12:02:20.128 - Orders received.\n[ Info: 2020-02-04T12:02:23.586 - Unpaid invoices created.\n[ Info: 2020-02-04T12:02:27.884 - Journal entries for unpaid invoices created.\n[ Info: 2020-02-04T12:02:34.27 - Get bankstatement entries for testing.\n[ Info: 2020-02-04T12:02:35.278 - Unpaid invoices retrieved from database.\n[ Info: 2020-02-04T12:02:35.906 - Journal entries for paid invoices created.","category":"page"},{"location":"chapterx3/#The-final-application-file-structure-1","page":"3. Experimenting with Modules","title":"The final application file structure","text":"","category":"section"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"The final folder structure and files for our Julia module AppliAR.jl.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"ᵥ📁 AppliAR\n   📁 .git\n   📁 .github\n  ᵥ📁 docs #1\n      📁 build\n      📁 src\n     ᵥ📁 stable\n         📁 assets\n         📁 chapter1\n         📁 chapter2\n         📁 chapter3\n         📁 search\n         📄 index.html\n         📄 search_index.js\n       📄 make.jl\n       📄 Manifest.toml\n       📄 Project.toml\n  ᵥ📁 src #2\n    ᵥ📁 api\n       📄 Api.jl\n       📄 spec.jl #3\n    ᵥ📁 domain\n       📄 Domain.jl\n\t\t\t 📄 spec.jl #3\n    ᵥ📁 infrastructure\n       📄 db.jl\n       📄 doc.jl #3\n       📄 Infrastructure.jl\n     📄 AppliAR.jl\n     📄 Reporting.jl\n  ᵥ📁 test\n     📄 Manifest.toml #4\n     📄 Project.toml #4\n     📄 runtests.jl #4\n   📄 .coveralls.yml\n\t 📄 .gitignore\n\t 📄 .travis.yml\n\t 📄 bank.csv\n   📄 LICENCE\n   📄 Manifest.toml\n   📄 Project.toml  #5\n   📄 README.md","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"Fig 1","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#1 Folders and files that make up the documentation of AppliAR.jl.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#2 The application files. We use the onion architecture.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#3 Julia help documentation. See chapter 8. Documenting your code.","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#4 Unit test file. See chapter 7. Writing test software","category":"page"},{"location":"chapterx3/#","page":"3. Experimenting with Modules","title":"3. Experimenting with Modules","text":"#5 Project.toml contains the dependencies of the module. Julia adds dependencies automatically to the file when you activate the local environment (pkg> activate .) and add a package (module). See Manifest.toml](https://julialang.github.io/Pkg.jl/v1/toml-files/): \"The manifest file is an absolute record of the state of the packages in the environment. It includes exact information about (direct and indirect) dependencies of the project, and given a Project.toml + Manifest.toml pair it is possible to instantiate the exact same package environment, which is very useful for reproducibility.\"","category":"page"},{"location":"chapterx6/#.-Testing-the-application-1","page":"6. Testing the application","title":"6. Testing the application","text":"","category":"section"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapterx6/#What-you-will-learn-1","page":"6. Testing the application","title":"What you will learn","text":"","category":"section"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"Pages = [\"chapter6.md\"]","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"You learn to use Julia Channel's to transfer data between the tasks. When started, a task receives a general channel where we put for the result. The dispatcher reads data from the channel and pushes it to the relevant private channel of the task. We let the methods run remotely, which means on another core or machine. Next, we start a function to retrieve data. The job pushes the returned data to the general channel, and the dispatcher decides again.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"Application set-up","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"                         +-------------+\n                         |    Master   |\n                         +-------------+\n                          BankStatement¹\n                                ¦\n                                ↓\n    ----------------------------------------------------- rx¹\n                   ↑⁴                    ↑⁴            ↓\n                   ¦                     ¦             ◊ Dispatcher²\n          ↙        ¦            ↙        ¦            ↙\n      --- tx³      ¦        --- tx³      ¦        --- tx³\n       ¦           ¦       Order,        ¦         ¦\n    \"START\"        ¦   BankStatement     ¦    JournalEntry\n       ¦           ¦         ¦           ¦         ¦\n       ↓         Order       ↓      JournalEntry   ↓\n      +--------------+      +--------------+      +--------------+\n      |    Sales     |      |  Invoicing   |      | GeneralLedger|    Workers\n      +--------------+      +--------------+      +--------------+\n↘","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"¹ rx, the channel that receives the output from the modules. The Master creates rx. The Master also generate the test data for the channel: Array{BankStatement, 1}.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"² Dispatcher, a job running in the Master, takes an object from rx and pushes it to the relevant tx channel.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"³ tx is a task bounded channel. The task takes the entity from his channel and processes it remotely.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"⁴ The task pushes the output, Array{Order, 1} or Array{JournalEntry, 1} in this diagram, to the rx channel.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"See: test_local_channels.jl","category":"page"},{"location":"chapterx6/#Using-Channels-1","page":"6. Testing the application","title":"Using Channels","text":"","category":"section"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"Julia has local and remote channels. In the test\\_local\\_channel.jl page, we use local channels. The dispatcher creates the general channel rx and instantiates the tasks. Each task returns its channel.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"function dispatcher()\n    rx = Channel(32) # local channel\n\n    tx0 = task_0(rx) # get the orders\n    tx1 = task_1(rx) # process the orders\n    tx2 = task_2(rx) # process the journal entries\n    tx3 = task_3(rx) # process the unpaid invoices","category":"page"},{"location":"chapterx6/#The-tasks-1","page":"6. Testing the application","title":"The tasks","text":"","category":"section"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"Each task creates its private channel tx. Then it starts an asynchronous endless loop. Within the while loop, it tests whether the channel is ready. If it is not ready, which means it doesn't have any data, it enters a wait state. As soon as there is data on the channel, it leaves the wait state.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"If the data has the right data type or value, it runs a function remotely. The task puts the return value of the function on the general channel rx and returns to its wait state until there is more data.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"Because the while loop runs asynchronous, the function can return it local channel to the dispatcher.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"For more information and examples of parallel computing, please see Carsten Bauer's Parallel Computing notebook.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"# =================================\n# task_1 - processing orders\n# =================================\nfunction task_1(rx)\n    tx = Channel(32)\n    @async while true\n        if isready(tx)\n            orders = take!(tx)\n            @info(\"task 1 (create invoices): $(typeof(orders))\")\n            if typeof(orders) == Array{AppliSales.Order, 1}\n                @info(\"task_1 (create invoices) will process $(length(orders)) orders remotely\")\n                result = @fetch AppliInvoicing.process(PATH_DB, orders)\n                @info(\"task_1 (create invoices) will put $(length(result)) journal entries on rx channel\")\n                put!(rx, result)\n            end\n        else\n            @info(\"task_1 (create invoices) is waiting for data\")\n            wait(tx)\n        end\n    end\n    return tx\nend # task_1","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"#1 - When the endless loop is in the wait(tx) state, then the state is released and is the if clause executed. It takes the value, and tests whether it is of the type Array{AppliSales.Order, 1}.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"#2 - The function AppliInvoicing.process(PATH_DB, orders) is executed remotely, on another core or machine","category":"page"},{"location":"chapterx6/#Running-code-on-other-cores-1","page":"6. Testing the application","title":"Running code on other cores","text":"","category":"section"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"Julia uses the master-worker concept. It means that you can let run your code on other cores or even cores on different machines.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"The code of the page test\\_remote\\_channels.jl can partially run on other processor cores.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"To enable parallel and distributed computing use the statement using Distributed.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"See: testremotechannels.jl","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"In this example, it is Julia that decides on which core the code will run.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"np = addprocs(4) #1\n@info(\"number of processes is $(length(np))\")","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"#1 My laptop, a Legion Y520, has a processor with 4 cores.","category":"page"},{"location":"chapterx6/#The-dispatcher-1","page":"6. Testing the application","title":"The dispatcher","text":"","category":"section"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"After initialization the dispather starts an asynchronous endless loop. It takes an entity from the general channel rx. Depending on the data type or value, it starts the relevant task.","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"function dispatcher()\n    rx = Channel(32)\n\n    tx0 = task_0(rx) # get the orders\n    tx1 = task_1(rx) # process the orders\n    tx2 = task_2(rx) # process the journal entries\n    tx3 = task_3(rx) # process the unpaid invoices\n\n    @async while true\n        if isready(rx)\n            value = take!(rx)\n            @info(\"Dispatcher received $(typeof(value))\")\n            if typeof(value) == String && value ==\"START\"\n                put!(tx0, \"START\")\n            elseif typeof(value) == Array{AppliSales.Order, 1}\n                put!(tx1, value)\n            elseif typeof(value) == Array{AppliGeneralLedger.JournalEntry,1}\n                put!(tx2, value)\n            elseif typeof(value) == Array{AppliInvoicing.BankStatement,1}\n                put!(tx3, value)\n            else\n                @warn(\"No task found for type $(typeof(value))\")\n            end\n        else\n            wait(rx)\n        end\n    end\n    return rx\nend # dispatcher","category":"page"},{"location":"chapterx6/#Output-1","page":"6. Testing the application","title":"Output","text":"","category":"section"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"The code on page test\\_remote\\_channel.jl generates the following output:","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"[ Info: Enabled distributed computing\n[ Info: number of processes is 4\n[ Info: Loaded ./api/myfunctions.jl\n[ Info: running test_remote_channel.jl\n[ Info: task_0 is waiting for data\n[ Info: task_1 is waiting for data\n[ Info: task_2 is waiting for data\n[ Info: task_3 is waiting for data\n\n[ Info: Dispatcher started\n[ Info: The Master will start the process and asks for test orders from the AppliSales module\n[ Info: Dispatcher received String\n[ Info: task_0 received String\n[ Info: task_0 will start the process remotely #1\n[ Info: task_0 will put 3 the orders on rx channel\n[ Info: task_0 is waiting for data\n\n[ Info: Dispatcher received Array{AppliSales.Order,1}\n[ Info: task_1 received Array{AppliSales.Order,1}\n[ Info: task_1 will process 3 orders remotely\n[ Info: task_1 will put 3 journal entries on rx channel\n[ Info: task_1 is waiting for data\n\n[ Info: Dispatcher received Array{AppliGeneralLedger.JournalEntry,1}\n[ Info: task_2 received Array{AppliGeneralLedger.JournalEntry,1}\n[ Info: task_2 will process 3 journal entries remotely\n[ Info: task_2 saved 3 journal entries\n[ Info: task_2 is waiting for data\n\n[ Info: Master got 2 bank statements\n[ Info: Master will put 2 bank statements on rx channel\n[ Info: Dispatcher received Array{AppliInvoicing.BankStatement,1}\n[ Info: task_3 received Array{AppliInvoicing.BankStatement,1}\n[ Info: task_3 will match unpaid invoices with bank statements\n[ Info: task_3 will put 2 journal entries on rx channel\n[ Info: task_3 is waiting for data\n\n[ Info: Dispatcher received Array{AppliGeneralLedger.JournalEntry,1}\n[ Info: task_2 received Array{AppliGeneralLedger.JournalEntry,1}\n[ Info: task_2 will process 2 journal entries remotely\n[ Info: task_2 saved 2 journal entries\n[ Info: task_2 is waiting for data\n\n[ Info: Dispatcher received String\n┌ Warning: No task found for type String\n└ @ Main ~/julia-projects/tc/AppliMaster/src/api/myfunctions.jl:130","category":"page"},{"location":"chapterx6/#","page":"6. Testing the application","title":"6. Testing the application","text":"#1 remotely means: running a task on another process (core).","category":"page"},{"location":"appendix/#Appendix-1","page":"Installation Instruction","title":"Appendix","text":"","category":"section"},{"location":"appendix/#Introduction-1","page":"Installation Instruction","title":"Introduction","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"I have a Lenovo Legion Y520 Windows 10 laptop with Ubuntu 20.04 installed on a Samsung portable SSD T5 disk. I start my machine from this disk.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"All installation instructions in this course are based on Ubuntu.","category":"page"},{"location":"appendix/#Install-Julia-1","page":"Installation Instruction","title":"Install Julia","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Your computer OS is Ubuntu 20.04 64 bit.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Step Action Comment\n1 Download Julia Click on the link and find the row Generic Linux Binaries for x86. Click on 64-bit. Download the file eg. julia-1.5.0-rc2-linux-x86_64.tar.gz\n2 Ctrl+Alt-T Open a terminal window.\n2 $ mkdir julia Create a folder\n3 $ cd julia Enter folder\n4 $ mv ~/Downloads/julia-1.5.0-rc2-linux-x86_64.tar.gz . Move the downloaded file to folder julia.\n5 $ tar -zxvf jjulia-1.5.0-rc2-linux-x86_64.tar.gz Extract the file.\n6 $ sudo ln -s /home/rob/julia-1.5.0-rc2-linux-x86_64.tar.gz /usr/local/bin/julia Create a symbolic link.\n7 $ julia Start Julia.\n8 Ctrl-D Close Julia.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"info: Info\nYou can remove a symbolic link with: rm julia.","category":"page"},{"location":"appendix/#Install-Git-1","page":"Installation Instruction","title":"Install Git","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Your computer OS is Ubuntu 20.04 64 bit.\nYou preferably have a GitHub account.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Step Action Comment\n1 sudo apt install git \n2 git config –global user.email \"<your email address>\" \n3 git config –global user.name \"<your first and last name>\" E.g. \"Rob Bontekoe\"\n4 git config –global github.user \"<yout git hub name>\" E.g. \"rbontekoe\"\n5 cat .gitconfig Show your git data.","category":"page"},{"location":"appendix/#Install-Atom-1","page":"Installation Instruction","title":"Install Atom","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Your computer OS is Ubuntu 20.04 64 bit.\nYou have installed Julia.\nYou have installed Git.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"See also: http://docs.junolab.org/stable/man/installation/","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Step Action Comment\n1 goto https://atom.io/ \n2 select Download .deb \n4 cd ~/Downloads/ \n5 sudo apt install ./atom-amd64.deb ","category":"page"},{"location":"appendix/#Install-Juno-1","page":"Installation Instruction","title":"Install Juno","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Your computer OS is Ubuntu 20.04 64 bit.\nYou have installed Julia.\nYou have installed Git\nYou have installed Atom.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Step Action Comment\n1 mkdir projects \n2 cd projects \n3 atom <Enter> Start Atom.\n4 Ctrl-, Open settings.\n5 Select: Packages \n6 Type: uber-juno In field under Installed packages.\n7 Click on the button: install Juno will be installed, can take a while.\n8 Close Atom \n9 atom . Start atom again with current directory as default.\n10 Select from menu: Juno Juno menu opens.\n11 Select: Open REPL Julia will be started.\n12 1 + 2 <Enter> Result of addition will be shown in the REPL.\n13 Select from menu: File \n14 Select: New file \n15 Type: println(\"Hello world!\") \n16 Shift-Enter Hello world! will be shown in the file after the statement.\n17 Ctrl-S The file can be saved.","category":"page"},{"location":"appendix/#Install-IJulia-1","page":"Installation Instruction","title":"Install IJulia","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Julia 1.0+ has been installed.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Step Action Comment\n1 julia Start Julia.\n2 ] Activate package manager.\n3 add IJulia Install package.\n4 BackSpace Back to the julia prompt.\n5 using IJulia Load package.\n6 notebook(detached=true, dir=\".\") Start IJulia.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Only the first time you get the next question:","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"install Jupyter via Conda, y/n? [y]:","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Type: y <Enter>","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Your browser window opens.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Step Action Comment\n7 Select: New > Julia 1.5.0-rc2 Create a new Julia notebook.\n8 Type: 1 + 2 Enter a formula in a cell.\n9 Shift-Enter Execute formula. The result 3 will be shown.","category":"page"},{"location":"appendix/#Install-Docker-1","page":"Installation Instruction","title":"Install Docker","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Your computer OS is Ubuntu 18.04 or higher.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Step Action Comment\n1 sudo apt-get update Update Software Repositories.\n2 sudo apt-get remove docker docker-engine docker.io Uninstall Old Versions of Docker\n3 sudo apt install docker.io Install Docker\n4 sudo systemctl start docker \n5 sudo systemctl enable docker \n6 sudo docker version Check Docker Version","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"See also: How To Install Docker On Ubuntu","category":"page"},{"location":"appendix/#Important-Docker-commands-1","page":"Installation Instruction","title":"Important Docker commands","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Action Comment\nsudo docker images Display all Docker Images.\nsudo docker ps Display all running containers.\nsudo docker ps - a Display all containers.\nsudo docker start <name or id> E.g docker start julia.\nsudo docker exec -it <name or id> <command> E.g docker exec -it julia bash.\nsudo docker exec -it <name or id> <command> E.g docker exec -it julia julia.\nCtrl-D Exit the container\nsudo docker stop <name or id> E.g docker stop julia.\nsudo docker rm -f <name or id> Delete a container.\nsudo docker rmi <image id> Delete a image.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"","category":"page"},{"location":"appendix/#To-be-reconsidered,-I-am-not-sure-to-deliver-on-line-courses-this-way.-1","page":"Installation Instruction","title":"To be reconsidered, I am not sure to deliver on-line courses this way.","text":"","category":"section"},{"location":"appendix/#Dockerfile-1","page":"Installation Instruction","title":"Dockerfile","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Your computer OS is Ubuntu 20.04.\nYou have installed Dockerversion version 0.18.0 or higher.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"If you have installed Docker, you can create a Docker Image from a Dockerfile. From an image you can create Docker containers.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"FROM \"jupyter/minimal-notebook\"\n\nUSER root\n\nENV JULIA_VERSION=1.1.0\n\nRUN mkdir /opt/julia-${JULIA_VERSION} && \\\n    cd /tmp && \\\n    wget -q https://julialang-s3.julialang.org/bin/linux/x64/`echo ${JULIA_VERSION} | cut -d. -f 1,2`/julia-${JULIA_VERSION}-linux-x86_64.tar.gz && \\\n    tar xzf julia-${JULIA_VERSION}-linux-x86_64.tar.gz -C /opt/julia-${JULIA_VERSION} --strip-components=1 && \\\n    rm /tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz\n\nRUN ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia\n\nUSER $NB_UID\n\n# Add packages and precompile\n\nRUN julia -e 'import Pkg; Pkg.update()' && \\\n    julia -e 'import Pkg; Pkg.add(\"Plots\"); using Plots' && \\\n    # julia -e 'import Pkg; Pkg.add(\"PlotlyJS\"); using PlotlyJS' && \\\n    julia -e 'import Pkg; Pkg.add(\"Distributions\"); using Distributions' && \\\n    julia -e 'import Pkg; Pkg.add(\"Optim\"); using Optim' && \\\n    julia -e 'import Pkg; Pkg.add(\"StatsPlots\"); using StatsPlots' && \\\n    julia -e 'import Pkg; Pkg.add(\"IJulia\"); using IJulia' && \\\n    fix-permissions /home/$NB_USER","category":"page"},{"location":"appendix/#Install-IJulia-2","page":"Installation Instruction","title":"Install IJulia","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Your computer OS is Ubuntu 20.04.\nYou have installed Dockerversion version 0.18.0 or higher.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"note: Note\nThe instruction are based on Ubuntu 18.04. We use the command line in a terminal window.First check whether Docker is installed on your system, by typing docker --version. If the command docker is not recognized, install Docker.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Step Action Comment\n1 Open a terminal window on Ubuntu $ is the prompt of your OS.\n2 $ mkdir work Create the folder work. Optionally, create sub-directories with the names of your students.\n3 $ mkdir julia Create another directory `julia'.\n4 $ cd julia Goto the directory julia.\n5 Copy the code of the section Dockerfile to the clipboard \n6 $ nano Dockerfile Open the text editor nano.\n7 Ctrl-Shift-V Paste the text on the clipboard into the text editor.\n8 Ctrl-O Save the Dockerfile.\n9 Ctrl-X Exit nano\n10 $ ls list the content of the directory julia.\n11 $ cat Dockerfile Display the content of the Dockerfile.\n12 $ docker build -t julia-image . Create a Docker IJulia image. The name of the image is julia-image.\n13 $ docker run -v ~/work:/home/jovjan/work -p 8888:8888 --name julia julia-image Create a Docker container, and the IJulia Notebook server starts.\n14 Ctrl-C Stop the server.","category":"page"},{"location":"appendix/#Using-IJulia-1","page":"Installation Instruction","title":"Using IJulia","text":"","category":"section"},{"location":"appendix/#Instructor-1","page":"Installation Instruction","title":"Instructor","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Step Action/Response Comment\n1 $ docker start julia Start the IJulia.\n2 $ docker exec -it julia bash Start the Docker client.\n3 jovyan@40f8c3bcf0c1:~$ jupyter notebook list Display the token.\n jovyan@40f8c3bcf0c1:~$ jupyter notebook list Currently running servers: http://0.0.0.0:8888/?token=f394613a12c103a2de92e70aa34715b2183d58e3d5580a2e :: /home/jovyan \n4 Select the token In this case: f394613a12c103a2de92e70aa34715b2183d58e3d5580a2e.\n5 Ctrl-Shift-C Copy the token to the clipboard.\n6 Store the key somewhere, so you can email it to your students. \n7 $ Ctrl-D Exit Docker client.","category":"page"},{"location":"appendix/#Install-Ubuntu-on-Samsung-T5-and-Lemovo-Legion-Y520-with-Windows-10-1","page":"Installation Instruction","title":"Install Ubuntu on Samsung T5 and Lemovo Legion Y520 with Windows 10","text":"","category":"section"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"The steps I have done.","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Step Action/Response Comment\n1 Download ISO-image from Ubuntu 18.04. website \n2 Copy with Rufus to USB-stick \n3 Start machine and press F2 Change the Bios Lenovo","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Under Boot tab:\nFast Boot disabled\nUnder Security tab:\nSecureboot disabled\nSee:\nhttps://github.com/kfechter/LegionY530Ubuntu/blob/master/Sections/InstallUbuntu.md","category":"page"},{"location":"appendix/#","page":"Installation Instruction","title":"Installation Instruction","text":"Step Action/Response Comment\n4 Start Y520 with Windows 10 and press F12 \n5 Choose Ubuntu Restart via USB.\n6 After restart choose for install Ubuntu on 500GB portable disk \n7 sudo apt update \n8 sudo do-release-upgrade -d Upgrade to Ubuntu 20.04.","category":"page"},{"location":"chapter12/#.-Run-the-Application-in-Containers-1","page":"12 - Run the Application in Containers","title":"12. Run the Application in Containers","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter12/#Contents-1","page":"12 - Run the Application in Containers","title":"Contents","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Pages = [\"chapter12.md\"]","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"In lesson 9, Creating SSH enabled Containers, we created two containers: test_sshd and test_sshd2. In this chapter, we learn how to run a function in a remote container test_sshd2. Before we use the model we created in earlier lessons, you will test the containers with the package RbO.jl.","category":"page"},{"location":"chapter12/#Activity-1:-1","page":"12 - Run the Application in Containers","title":"Activity 1:","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"You start the two Docker containers, test_sshd, and test_sshd2. We need to know their Docker IP-addresses. With the command ssh rob@<ip-address>, we enter the test_sshd container. Within this container, we generate a process id bound to the IP-address of test_ssh2.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"We create the file main.jl, which contains the base code for container-container communication.","category":"page"},{"location":"chapter12/#Activities-2a-and-2b:-1","page":"12 - Run the Application in Containers","title":"Activities 2a and 2b:","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Next, we use the example code to create a subscriber based on a name. We prefer to do the test with AppliGate's module RbO.jl. In chapter 12, you will use your modules.","category":"page"},{"location":"chapter12/#Activity-3:-1","page":"12 - Run the Application in Containers","title":"Activity 3:","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"You learn to write a function that can run remotely, and that saves a subscriber in an SQLite database on the container test_sshd2.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#Activity-1:-Start-the-Julia-1.3.0-containers-1","page":"12 - Run the Application in Containers","title":"Activity 1: Start the Julia 1.3.0 containers","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Prerequisites:","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Docker is installed on your computer.\nYou have the two containers test_sshd and test_sshd2 created in chapter 9, Create the Container.\nBoth containers are SSH enabled.\nYou have a Internet connection to download the RbO.jl module.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Steps:","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Start both containers and check their Docker internal IP-address.\nUse SSH to connect from testsshd to testsshd2 and install RbO.jl in both containers.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#Step-1-Start-both-containers-and-check-their-Docker-internal-IP-address-1","page":"12 - Run the Application in Containers","title":"Step 1 - Start both containers and check their Docker internal IP-address","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Step Action Comment\n1 $ docker start test_sshd \n2 $ docker start test_sshd2 \n3 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd e.g. 172.17.0.2\n3 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd2 e.g. 172.17.0.3","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#Step-2-Use-SSH-to-connect-from-test_sshd-to-test_sshd2-and-install-RbO.jl-1","page":"12 - Run the Application in Containers","title":"Step 2 - Use SSH to connect from test_sshd to test_sshd2 and install RbO.jl","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Install RbO in both containers, Example of adding the module","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Step Action Comment\n1 $ ssh rob@172.17.0.2 Enter the container test_sshd.\n2 $ ssh rob@172.17.0.3 Enter the container test_sshd3.\n3 $ julia Start Julia.\n4 julia> ] Go to the package manager.\n5 pkg> add https://github.com/rbontekoe/RbO.jl Install RbO.jl.\n6 Ctrl-C Return to REPL prompt.\n7 Ctrl-D Leave Julia.\n8 Ctrl-D Leave the container test_sshd2.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"note: Note\nIf your container is running on a remote machine, you have to use the ip-address of the remote machine and the exported port of the container to connect to.$ docker start test_sshd # start the container test_sshd$ docker port test_sshd # display the port, e.g. 22/tcp -> 0.0.0.0:32768$ ssh 192.168.xxx.xxx -p 32768 # connect to the container on remote machine","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#Activity-2a:-Start-the-two-containers-and-create-main.jl-1","page":"12 - Run the Application in Containers","title":"Activity 2a: Start the two containers and create main.jl","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Prerequisites:","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Docker is installed on your computer.\nYou have the two containers testsshd and testsshd2 created in Chapter 9, Create the Container.\nBoth containers are SSH-enabled.\nJulia is installed in the directory julia on the containers.\nThe RbO.jl package is installed in both containers.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Steps","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Start the container test_sshd and create main.jl with nano.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#.-Start-the-container-test_sshd-and-test_sshd2-1","page":"12 - Run the Application in Containers","title":"1. Start the container test_sshd and test_sshd2","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Step Action Comment\n1 $ docker start test_sshd Start the first container.\n2 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd Displays docker address, eg, 172.17.0.2.\n3 Take a note of the ip-address of test_sshd \n4 $ docker start test_sshd2 Start the second container.\n5 Take a note of the ip-address of test_sshd2 \n6 $ ssh rob@172.17.0.2 Use the ip-address step 2.\n7 $ julia Start Julia, and continue at step 8 of Activity 2: Test the code","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#Example-test-code-1","page":"12 - Run the Application in Containers","title":"Example test code","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"julia> using Distributed\n\njulia> d = Dict([]) # empty directory for pids, used by the calling container\nDict{Any,Any} with 0 entries\n\njulia> addprocs([(\"rob@172.17.0.3\", 1)])\n\njulia> d[\"test_sshd2\"] = last(workers())\n\njulia> @everywhere using RbO\n\njulia> @everywhere f1(x) = createSubscriber(x)\n\njulia> s1 = remotecall_fetch(f1, d[\"test_sshd2\"], \"Daisy\")\n","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#Activity-2b:-Test-the-code-1","page":"12 - Run the Application in Containers","title":"Activity 2b: Test the code","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Prerequisites:","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Actitvity 1","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Step Action Comment\n8 Copy all the Test code example code to the clipboard, including the julia prompt and the response \n9 Return to the container \n10 Ctrl-Shfi-V Paste the text on the clipboard in the Julia REPL.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"The result should look like the next example:","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"julia> s1 = remotecall_fetch(f1, d[\"test_sshd2\"], \"Daisy\")\nSubscriber(\"884704875723870469\", \"Daisy\", \"\", MEAN_CALCULATOR)","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#Activity-3:-Run-a-function-in-the-remote-container-1","page":"12 - Run the Application in Containers","title":"Activity 3: Run a function in the remote container","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Create and save a subscriber in the container test_sshd2. Then display all saved subscribers from a table.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Prerequisites:","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Activity 1\nActivity 2\nThe package SQLite.jl is installed in both containers.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Steps:","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Install SQLite.jl\nTry the example code\nUse the RbO.jl documentation","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#.-Install-SQLite.jl-1","page":"12 - Run the Application in Containers","title":"1. Install SQLite.jl","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Step Action Comment\n1 Enter test_sshd and start Julia \n2 Go to the package manager \n3 pkg > add SQLite ","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#.-Try-the-example-code-1","page":"12 - Run the Application in Containers","title":"2. Try the example code","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Try the code below.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"\nusing Distributed\n\nd = Dict([])\n\naddprocs([(\"rob@172.17.0.3\", 1)])\n\nd[\"test_sshd2\"] = last(workers())\n\n@everywhere using RbO\n\n# define a new function to create a new subscriber and save it in a database\n@everywhere f2(x) = begin\n  \ts = createSubscriber(x) # create a subscriber\n\tdb = connect(\"./rbo.sqlite\") # connect to database\n\tcreate(db, \"subscribers\", [s]) # save subscriber in database\nend\n\nremotecall_fetch(f2, 2, \"Mickey\")\n\n# define a new function for displaying all subscribers\n@everywhere f3(x) = begin\n   db = connect(\"./rbo.sqlite\") # connect to database\n   gather(db, x) # list all items in table x\nend\n\n# Get list of subscrobers\nremotecall_fetch(f3, 2, \"subscribers\")\n\n# Remove process\nrmprocs(d[\"test_sshd2\"])\n\n# Remove key from dictionary\ndelete!(d, \"test_sshd2\")\n","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"","category":"page"},{"location":"chapter12/#.-Use-the-RbO.jl-documentation-1","page":"12 - Run the Application in Containers","title":"3. Use the RbO.jl documentation","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Use the documentation to do the next steps.","category":"page"},{"location":"chapter12/#","page":"12 - Run the Application in Containers","title":"12 - Run the Application in Containers","text":"Step Action Comment\n1 Use the command connect to create a link to the on-disk database rbo.sqlite \n2 Use the command 'gather' to retieve data from the SQL table subscribers ","category":"page"},{"location":"chapterx7/#.-Writing-test-software-1","page":"7. Writing test software","title":"7. Writing test software","text":"","category":"section"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"Under development!","category":"page"},{"location":"chapterx7/#What-you-will-learn-1","page":"7. Writing test software","title":"What you will learn","text":"","category":"section"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"Pages = [\"chapter7.md\"]","category":"page"},{"location":"chapterx7/#Folder-structure-AppliInvoicing-module-1","page":"7. Writing test software","title":"Folder structure AppliInvoicing module","text":"","category":"section"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"Tests should be placed in the file runtests.jl in the folder test.","category":"page"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"ᵥ📁AppliInvoicing\n   📁 .git\n   📁 src\n  ᵥ📁 test\n     📄 runtests.jl","category":"page"},{"location":"chapterx7/#Using-@testset-and-@test-1","page":"7. Writing test software","title":"Using @testset and @test","text":"","category":"section"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"An example from AppliInvoicing:","category":"page"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"using Test\n\n@testset \"Orders\" begin\n    using AppliSales\n    orders = AppliSales.process()\n    @test length(orders) == 3\n    @test orders[1].org.name == \"Scrooge Investment Bank\"\n    @test orders[1].training.name == \"Learn Smiling\"\nend","category":"page"},{"location":"chapterx7/#runtests.jl-1","page":"7. Writing test software","title":"runtests.jl","text":"","category":"section"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"When you put your tests in the file runtests.jl you can also run the tests of a module elsewhere, e.g. AppliMaster. Make sure you added the package (module) and are in the Package manager mode.","category":"page"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"The Package manager command help (?):","category":"page"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"julia> using Test\n\njulia> ]\n\n(v1.3) pkg> ?test\n  test [--coverage] pkg[=uuid] ...\n\n  Run the tests for package pkg. This is done by running the file **test/runtests.jl** in the package directory. The option --coverage\n  can be used to run the tests with coverage enabled. The startup.jl file is disabled during testing unless julia is started with\n  --startup-file=yes.","category":"page"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"Example of running runtests.jl of AppliInvoicing.","category":"page"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"(v1.3) pkg> test AppliInvoicing\n  Testing AppliInvoicing\n\nTest Summary: | Pass  Total\nOrders        |    3      3\nTest Summary:  | Pass  Total\nUnpaidInvoices |    7      7\nTest Summary:           | Pass  Total\nRetrieve UnpaidInvoices |    7      7\nTest Summary:                   | Pass  Total\nRetrieve BankStatement from CSV |    2      2\nTest Summary: | Pass  Total\nJounalEntry's |    3      3\nTest Summary:       | Pass  Total\nprocess(db, orders) |    6      6\nTest Summary:                | Pass  Total\nretrieve_unpaid_invoices(db) |    2      2\nTest Summary:               | Pass  Total\nprocess(db, unpaid_invoices |    4      4\n   Testing AppliInvoicing tests passed","category":"page"},{"location":"chapterx7/#","page":"7. Writing test software","title":"7. Writing test software","text":"See the all tests: AppliInvoicing.jl/test/runtests.jl","category":"page"},{"location":"chapter6/#.-Accounts-Package-from-a-User-Point-of-View-1","page":"6 - The Accounts Package from a User Point of View","title":"6. Accounts Package from a User Point of View","text":"","category":"section"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"When you use using <module name> in your code the it makes the exported elements immediately accessible in the current scope. You can display the elements by typing Account. followed by pressing twice on the Tab-button.","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"In this chapter you will define which elements will be exported.","category":"page"},{"location":"chapter6/#Contents-1","page":"6 - The Accounts Package from a User Point of View","title":"Contents","text":"","category":"section"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"Pages = [\"chapter6.md\"]","category":"page"},{"location":"chapter6/#Accounts.jl-1","page":"6 - The Accounts Package from a User Point of View","title":"Accounts.jl","text":"","category":"section"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"module Accounts\n\nexport EMAIL, WORK # Domain #1\nexport create # API #2\nexport add_to_file, read_from_file # Infrastructure #3\n\ninclude(\"Domain.jl\"); using .Domain\ninclude(\"API.jl\"); using .API\ninclude(\"Infrastructure.jl\"); using .Infrastructure\n\nend","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"#1 EMAIL and WORK are values we need in the create-function.","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"#2 The user needs create to create addresses and persons","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"#3 The function to store and retrieve persons.","category":"page"},{"location":"chapter6/#Activity-6.1-Export-Elements-1","page":"6 - The Accounts Package from a User Point of View","title":"Activity 6.1 - Export Elements","text":"","category":"section"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"In this activity you define which functions, enumerated values, and DataType are immediately available when a software programmer uses our module Accounts.","category":"page"},{"location":"chapter6/#Prerequisites-1","page":"6 - The Accounts Package from a User Point of View","title":"Prerequisites","text":"","category":"section"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"Ubuntu 20.04.\nJulia 1.5 installed.\nAtom/Juno installed.\nGit installed.\nThe finished exercise Exercise 5.1 - Adding the sub-module Infrastructure","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"Step Action Comment\n1 $ cd ~/.julia/dev/Accounts Go to the Acoounts project folder.\n2 $ atom . Start Atom/Juno.\n3 Open the file Accounts.jl \n4 Remove the hashtags According to section Accounts.jl\n5 Ctrl-S Save the file.\n6 Ctrl-D Close Julia.\n7 Press: <Enter> Start Julia REPL.\n8 julia> ] Start the package manager.\n9 pkg> activate . Open Accounts environment.\n10 Press: <BackSpace> \n11 julia> using Accounts Lead Accounts module.\n12 julia> Accounts. <Tab><Tab> Display exported elements.","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"julia> Accounts.\nAPI            Domain          EMAIL           Infrastructure  WORK            \nadd_to_file     create        eval            include         read_from_file","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"Step Action Comment\n13 Shift+Ctrl-9 Open Git panel when closed.\n14 Put the cursor in the field Commit message \n15 Type: Define export elements Account.jl \n16 Click on: Stage All \n17 Click on: Commit to master \n18 Click on: Push \n19 Verify on GitHub whether you see the exports in Accounts.jl ","category":"page"},{"location":"chapter6/#test_accounts.jl-1","page":"6 - The Accounts Package from a User Point of View","title":"test_accounts.jl","text":"","category":"section"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"using Pkg; Pkg.activate(\".\")\n\nusing Accounts\n\n@info(\"With DataFrames you can manpulate data\")\ntry\n  using DataFrames\ncatch e\n  Pkg.add(\"DataFrames\")\n  using DataFrames\nend\n\nmm_email = create(EMAIL, \"mickey@duckcity.com\")\ndd_email = create(EMAIL, \"donald@duckcity.com\")\ndd_work = create(WORK,\n  \"\"\"\n  Magic Kingdom\n  1180 Seven Seas Dr\n  Lake Buena Vista\n  FL 32830\n  United States\n  \"\"\"\n)\n\ndd_addresses = [dd_email, dd_work]\n\ndonald = create(\"Donald Duck\", dd_addresses)\nmickey = create(\"Mickey Mouse\", [mm_email])\n\n@info(\"Save and retrieve the data\")\n\nconst FILE_ACCOUNTS = \"./test_accounts.txt\"\n\n@info(\"Add Donald and Mickey to a file\")\nadd_to_file(FILE_ACCOUNTS, [donald, mickey])\n\n@info(\"Read the data from the file and pass it to a DataFrame\")\ndf = read_from_file(FILE_ACCOUNTS) |> DataFrame\n\n# @info(\"Describe DataFrame df\")\n# println(describe(df))\n\n@info(\"Show some data\")\nprintln(df.name)\n\n@info(\"Print all rows\")\nprintln(df[:, [:created, :name]])\n\n@info \"Add a column email\"\ndf[!, :email] = map(x -> (filter(y -> y.address_type == EMAIL, x))[1].address, df[:, :addresses])\nprintln(df[:, [:created, :name, :email]])\n\n@info(\"Remove the file $FILE_ACCOUNTS\")\ntry\n  rm(\"$FILE_ACCOUNTS\") # remove file\n  @warn(\"File $FILE_ACCOUNTS removed from disk\")\ncatch e\n  @warn(e.msg)\nend","category":"page"},{"location":"chapter6/#Activity-6.2-Test-the-Module-1","page":"6 - The Accounts Package from a User Point of View","title":"Activity 6.2 - Test the Module","text":"","category":"section"},{"location":"chapter6/#Requisites-1","page":"6 - The Accounts Package from a User Point of View","title":"Requisites","text":"","category":"section"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"Ubuntu 20.04.\nJulia 1.5 installed.\nAtom/Juno installed.\nGit installed.\nGitHub repository of Accounts is available.","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"Step Action Comment\n1 $ cd projects Create the folder projects when it doesn't exist.\n2 $ mkdir TestAccounts \n3 # cd TestAccounts \n4 atom . \n5 Juno > Open REPL \n6 Press: Enter-button \n7 julia> ] \n8 pkg> activate . \n9 (TestAccounts) pkg> add https://github.com/<your account name>/Accounts.jl Download the package. Use rbontekoe in case you doesn't have a GitHub repository of Accounts yourself.\n10 TestAccounts) pkg>test Accounts Run the tests.","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"Test Summary: | Pass  Total\nDomain.jl     |    1      1\nTest Summary: | Pass  Total\nAPI.jl        |    1      1\nTest Summary:     | Pass  Total\nInfrastructure.jl |    1      1\n    Testing Accounts tests passed","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"Step Action Comment\n11 Press: BackSpace-button Return to Julia.\n12 File > New File Create a new file, e.g. test_accounts.jl.\n13 Press: <Enter> Create the file.\n14 Ctrl-S Save the file.\n15 Paste the code under the section test_ accounts.jl in the file \n16 Use repeatably Shift-Enter to execute the lines Run the code line by line.","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"The output looks like:","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"environment at `~/.julia/dev/Accounts/Project.toml`\n[ Info: With DataFrames you can manpulate data\n[ Info: Save and retrieve the data\n[ Info: Add Donald and Mickey to a file\n[ Info: Read the data from the file and pass it to a DataFrame\n[ Info: Show some data\n[\"Donald Duck\", \"Mickey Mouse\"]\n\n[ Info: Print all rows\n│ Row │ created                 │ name         │\n│     │ Dates.DateTime          │ String       │\n├─────┼─────────────────────────┼──────────────┤\n│ 1   │ 2020-08-19T12:07:12.236 │ Donald Duck  │\n│ 2   │ 2020-08-19T12:07:12.605 │ Mickey Mouse │\n\n[ Info: Add a column email\n2×3 DataFrame\n│ Row │ created                 │ name         │ email               │\n│     │ Dates.DateTime          │ String       │ String              │\n├─────┼─────────────────────────┼──────────────┼─────────────────────┤\n│ 1   │ 2020-08-19T12:07:12.236 │ Donald Duck  │ donald@duckcity.com │\n│ 2   │ 2020-08-19T12:07:12.605 │ Mickey Mouse │ mickey@duckcity.com │\n\n[ Info: Remove the file ./test_accounts.txt\n┌ Warning: File ./test_accounts.txt removed from disk\n└ @ Main ~/.julia/dev/Accounts2/src/test_accounts.jl:56","category":"page"},{"location":"chapter6/#runtest.jl-1","page":"6 - The Accounts Package from a User Point of View","title":"runtest.jl","text":"","category":"section"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"using Accounts\nusing Test\n\nconst FILE_ACCOUNTS = \"./test_accounts.txt\"\n\n@testset \"Accounts.jl\" begin\n    donald_email = create(EMAIL, \"donald@duckcity.com\")\n    donald = create(\"Donald Duck\", [donald_email])\n    add_to_file(FILE_ACCOUNTS, [donald])\n    result = read_from_file(FILE_ACCOUNTS)\n    first_person = result[1]\n    @test first_person.addresses[1].address == \"donald@duckcity.com\"\n    cmd = `rm $FILE_ACCOUNTS` # linux remove file statement\n    run(cmd) # remove file\nend","category":"page"},{"location":"chapter6/#Exercise-6.1-Redefine-runtests.jl-1","page":"6 - The Accounts Package from a User Point of View","title":"Exercise 6.1 - Redefine runtests.jl","text":"","category":"section"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"In this exercise you run a test in the folder TestAccounts again with the modified Accounts module.","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"Return to the Accounts development environment and change the contents of Accounts.jl conform the section runtest.jl.\nGo to the package manager and run test Accounts.\nGot to the folder TestAccounts, start Atom/Juno and activate the TestAccounts environment. Run first update Accounts and next test Accounts. Run your test software.\nUpdate your GitHub repostitory.\nGo to the TestAccounts folder, start Atom/Juno and Julia and activate the next package manager commands, activate . , status, update Accounts, test Accounts:","category":"page"},{"location":"chapter6/#","page":"6 - The Accounts Package from a User Point of View","title":"6 - The Accounts Package from a User Point of View","text":"(@v1.5) pkg> activate .\n Activating environment at `~/projects/TestAccounts/Project.toml`\n\n(TestAccounts) pkg> status\nStatus `~/projects/TestAccounts/Project.toml`\n  [c01e8521] Accounts v0.1.0 `https://github.com/rbontekoe/Accounts.jl#master`\n  [a93c6f00] DataFrames v0.21.6\n\n(TestAccounts) pkg> update Accounts\n   Updating registry at `~/.julia/registries/General`\n######################################################################## 100,0%\n   Updating git-repo `https://github.com/rbontekoe/Accounts.jl`\nUpdating `~/projects/TestAccounts/Project.toml`\n  [c01e8521] ~ Accounts v0.1.0 `https://github.com/rbontekoe/Accounts.jl#master` ⇒ v0.1.0 `https://github.com/rbontekoe/Accounts.jl#master`\nUpdating `~/projects/TestAccounts/Manifest.toml`\n  [c01e8521] ~ Accounts v0.1.0 `https://github.com/rbontekoe/Accounts.jl#master` ⇒ v0.1.0 `https://github.com/rbontekoe/Accounts.jl#master`\n\n(TestAccounts) pkg> test Accounts\n    Testing Accounts\n\nTest Summary: | Pass  Total\nAccounts.jl   |    1      1\n    Testing Accounts tests passed\n","category":"page"},{"location":"chapter8/#.-The-Domain-Sub-module-1","page":"8 - The Domain Sub-module","title":"8. The Domain Sub-module","text":"","category":"section"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"The module AppliAR follows the same structure as we have discussed in the Account module. We go deeper into the main differences.","category":"page"},{"location":"chapter8/#Contents-1","page":"8 - The Domain Sub-module","title":"Contents","text":"","category":"section"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"Pages = [\"chapter8.md\"]","category":"page"},{"location":"chapter8/#The-Application-Folder-Structure-1","page":"8 - The Domain Sub-module","title":"The Application Folder Structure","text":"","category":"section"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"ᵥ📁AppliAR\n   📁 docs #1\n     📁 src\n     📁 stable\n       📁 assets #1\n       📁 chapter1 #1\n       📁 chapter2 #1\n       📁 chapter3 #1\n       📁 chapter4 #1\n       📄 index.html #1\n       📄 search_index.js #1\n  ᵥ📁 src #2\n    ᵥ📁 api\n       📄 Api.jl\n       📄 spec.jl #3\n    ᵥ📁 domain\n       📄 Domain.jl\n       📄 spec.jl #3\n    ᵥ📁 infrastructure\n       📄 Infrastructure.jl\n       📄 db.jl\n       📄 doc.jl #3\n     📄 AppliAR.jl\n     📄 Report.jl\n  ᵥ📁 test\n     📄 runtests.jl #4\n   📄 bank.csv\t \n   📄 LICENCE\n   📄 Project.toml  #5\n   📄 README.md","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"#1 Folders and files that make up the documentation of AppliAR.jl.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"#2 The application files.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"#3 Julia help documentation.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"#4 Unit test file.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"#5 Contains the dependencies. Julia adds dependencies automatically to the Project.toml file when you activate the local environment (pkg> activate .) and add a package (module). See Manifest.toml](https://julialang.github.io/Pkg.jl/v1/toml-files/): \"The manifest file is an absolute record of the state of the packages in the environment. It includes exact information about (direct and indirect) dependencies of the project, and given a Project.toml + Manifest.toml pair it is possible to instantiate the exact same package environment, which is very useful for reproducibility.\"","category":"page"},{"location":"chapter8/#The-Model-1","page":"8 - The Domain Sub-module","title":"The Model","text":"","category":"section"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"The sub-modules Domain.jl, API.jl and Infrastructure.jl shape the model and are located in the sub-folders. It makes it easier to split and group things.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"The file Domain.jl is in the sub-folder domain. As well as the file spec.jl we use for:","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"Specifying the abstract object hierarchy.\nDocumenting the functions.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"When Domain.jl is loaded, it also loads spec.jl.","category":"page"},{"location":"chapter8/#Specifying-the-Object-Hierarchy-1","page":"8 - The Domain Sub-module","title":"Specifying the Object Hierarchy","text":"","category":"section"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"A data structure consists of abstract and concrete data types. The leaves are the concrete data types that we define in Domain.jl.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"We have three branches, Invoice, Structure, and Payment.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"The Structure branch determines the basic structure. It consists of a Header, a Body, and a Footer.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"A PaidInvoice is an UnpaidInvoice plus payment details.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"We can then refer to the data-type Invoice when we want for example:","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"Get the invoice number.\nGet the order number.\nSaving and retrieving an invoice.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"However, if we want to view the payment data, we must explicitly refer to PaidInvoice.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"                 _____________________ARDomain_______________\n                 ↓                       ↓                  ↓\n            Invoice             ___Structure____         Payment\n            ↓     ↓             ↓     ↓        ↓            ↓\n UnpaidInvoice  PaidInvoice   Meta  Header  BodyItem   BankStatement\n                                               ↓\n                                          OpenTraining\n\nspec.jl, abstract types:\nabstract type ARDomain end\nabstract type Invoice <: ARDomain end\nabstract type Structure <: ARDomain end\nabstract type BodyItem <: Structure end\nabstract type Payment <: ARDomain end","category":"page"},{"location":"chapter8/#Domain.jl-1","page":"8 - The Domain Sub-module","title":"Domain.jl","text":"","category":"section"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"Let's have a look at the UnpaidInvoice.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"struct UnpaidInvoice <: Invoice\n    _id::String\n    _meta::MetaInvoice\n    _header::Header\n    _body::OpentrainingItem\nend # UnpaidInvoice","category":"page"},{"location":"chapter8/#Reading-Object-Fields-1","page":"8 - The Domain Sub-module","title":"Reading Object Fields","text":"","category":"section"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"We have defined functions to read the fields of an object. E.g. id(i::Invoice) returns the id of an unpaid invoice as well as of a paid invoice.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"The advantage of defining functions to read fields are:","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"You can change the field name of an object without affecting your program.\nChange the data type of a field, but you let the function still returns the original datatype.\nMore or less hiding the field names. However, when the user uses the function fieldnames he can discover the names.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"julia> using AppliAR\n\njulia> fieldnames(UnpaidInvoice)\n(:_id, :_meta, :_header, :_body)","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"To make my programs robust I prefer to work with immutable data types. When I want to change the value of a field of an object then I have to recreate the object. So basically I only need to read the value from a field.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"# Fields Invoice\nmeta(i::Invoice)::MetaInvoice = i._meta\nheader(i::Invoice)::Header = i._header\nbody(i::Invoice)::BodyItem = i._body\nid(i::Invoice)::String = i._id\n\n# Field of an PaidInvoice containing the bank statement\nstm(i::PaidInvoice) = i._stm","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"ou see that I refer to the abstract data type Invoice for retrieving the field values of UnpaidInvoice or PaidInvoice. Except, when I need the payment data I refer explicitly to PaidInvoce.","category":"page"},{"location":"chapter8/#.1-Case-Study-Part-One-Redefining-BodyItem-as-a-Concrete-Datatype-1","page":"8 - The Domain Sub-module","title":"8.1 Case Study Part One - Redefining BodyItem as a Concrete Datatype","text":"","category":"section"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"Our boss wants our module to be able to print invoices with more than one item, e.g. books and in-company training. He also believes that Structure must resemble a hard copy invoice and that any additional information should be retrieved from the metadata. So, BodyItem must be the leave of the tree.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":" ____Structure____\n ↓       ↓       ↓\nMeta   Header   BodyItem","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"Example of the body of a hard copy invoice:","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"Item Qty Description Price VAT Total\nLS 2 Learn Smiling 1,000.00 0.21 2,420,00\n  Date 2020/9/30   \n  Attendees: Mickey Mouse, Mini Mouse   \n     \nBAWJ 1 Sylabus 15,00 0.21 18.15\n     \nTotal     2,438,25","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"We have to replace OpenTrainingItem with BodyItem. Also, we have to remove the abstract definition of BodyItem.","category":"page"},{"location":"chapter8/#","page":"8 - The Domain Sub-module","title":"8 - The Domain Sub-module","text":"struct BodyItem <: Struture\n    _prod_code::String\n    _qty::Float64\n    _descr::Array{String, 1}\n    _unit_price::Float64\n    _vat::Float64\nend\n\ncode(b::BodyItem) = b._prod_code\ndescr(b::BodyItem{Array(String, 1)}) = b.descr\nunit_price(b::BodyItem) = b._unit_price\nquantity(b::BodyItem) = b._qty\nvat(b::BodyItem) = b._vat\n\n# Example of creatinga BodyItem\n\not = OpentrainingItem(\"Learn Smiling\", Date(2020, 9, 30), 1000.0, [\"Mickey Mouse\", \"Mini Mouse\"])\n\nstudents = \"Attendees: \" * reduce((x, y) -> x * \", \" * y, ot._students)\ndescription  = [ot._name_training, Date(ot._date), students]\n\nbody = Body(\n  ot._name_training, # code\n  \"Date: \" * string(length(ot._students)), # quantity\n  description, # descr\n  ot._price_per_student, # unit_price\n  ot._vat_perc # vat\n  )","category":"page"},{"location":"chapterx11/#.-Creating-containers-on-the-Raspberry-Pi-1","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"","category":"section"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"UNDER DEVELOPMENT!!! - Almost ready","category":"page"},{"location":"chapterx11/#What-you-will-learn-1","page":"11. Creating containers on the Raspberry Pi","title":"What you will learn","text":"","category":"section"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Pages = [\"chapter11.md\"]","category":"page"},{"location":"chapterx11/#Create-the-image-and-the-container-1","page":"11. Creating containers on the Raspberry Pi","title":"Create the image and the container","text":"","category":"section"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Prerequisites:","category":"page"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Your have Rasbian OS on your Raspberry Pi.\nYou have nano installed (apt-get update && apt-get install nano)\nYou have started your computer.\nYou have installed Docker (See appendix). TODO Check whether instructions are still right!!!","category":"page"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Steps:","category":"page"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Create a Dockerfile in the folder test-sshd.\nCreate a Docker image eg_ssdh and the container test_sshd.\nCreate a user rob, who has administrator rights.\nCheck whether you have SSH access to the container.","category":"page"},{"location":"chapterx11/#Remove-next-text-1","page":"11. Creating containers on the Raspberry Pi","title":"Remove next text","text":"","category":"section"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Following the instructions on Dockerize an SSH service.","category":"page"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Created the container on Raspberry Pi.\nTried the connection; it works nice but I have to login with a password.","category":"page"},{"location":"chapterx11/#.-Create-a-Dockerfile-in-the-folder-test_ssh-1","page":"11. Creating containers on the Raspberry Pi","title":"1. Create a Dockerfile in the folder test_ssh","text":"","category":"section"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Step Action Comment\n1 ssh pi@xxx.xxx.xxx.xxx Login on Raspberry Pi.\n2 Folow the instructions on 1. Create a Dockerfile in the folder test_ssh Same Dockerfile","category":"page"},{"location":"chapterx11/#.-Create-a-Docker-image-eg_sshd-and-the-container-test_sshd-1","page":"11. Creating containers on the Raspberry Pi","title":"2. Create a Docker image eg_sshd and the container test_sshd","text":"","category":"section"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Step Action Comment\n1 $ docker build -t eg_sshd . Create a Docker image from the Dockerfile\n2 $ docker run -d -p 2222:22 --name test_sshd eg_sshd Create a container","category":"page"},{"location":"chapterx11/#.-Create-a-user-rob,-who-has-administrator-rights-1","page":"11. Creating containers on the Raspberry Pi","title":"3. Create a user rob, who has administrator rights","text":"","category":"section"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Follow the instructions on 3. Create a user rob, who has administrator rights.","category":"page"},{"location":"chapterx11/#.-Check-whether-you-have-SSH-access-to-the-container.-1","page":"11. Creating containers on the Raspberry Pi","title":"4. Check whether you have SSH access to the container.","text":"","category":"section"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Step Action Comment\n1 $ ssh rob@xxx.xxx.xxx.xxx -p 2222 Use the ip-address of your Raspberry Pi.\n2 Login with the password you specified in previous step 3 You should see something like rob@675c5140e449:~$.","category":"page"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"info: Info\nYou can Copy your file with your file id_rsa.pub in the folder ~/.ssh to establish passwordless access to your container. Use the command ssh-copy-id rob@xxx.xxx.xxx.xxx -p 2222, either form your laptop or a container on your laptop.  In this case is xxx.xxx.xxx.xxx the ip-address of your Raspberry Pi.","category":"page"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Step Action Comment\n1 Ctrl-D Leave the container.\n2 Ctrl-D Leave the Raspberry Pi.\n3 $ sudo docker start test_sshd Start the test_sshd container on your laptop.\n4 $ ssh-copy-id rob@xxx.xxx.xxx.xxx -p 2222 copy your public key to the container running on the Raspberry Pi.\n5 $ ssh rob@xxx.xxx.xxx.xxx -p 22222 Connect to the remote container. The first time you have to login.","category":"page"},{"location":"chapterx11/#Install-Julia-1","page":"11. Creating containers on the Raspberry Pi","title":"Install Julia","text":"","category":"section"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"Step Action Comment\n1 $ mkdir julia Leave the container.\n2 $ cd julia \n3 $ wget -c https://julialang-s3.julialang.org/bin/linux/armv7l/1.3/julia-1.3.1-linux-armv7l.tar.gz Download the file.\n8 $ tar -zxvf julia-1.3.1-linux-armv7l.tar.gz Extract the file.\n9 $ ls List the content of the folder.\n julia-1.3.1  julia-1.3.1-linux-armv7l.tar.gz \n10 $ cd julia-1.3.0/bin/ We will test Julia.\n11 $ ./julia Start Julia.","category":"page"},{"location":"chapterx11/#Response-1","page":"11. Creating containers on the Raspberry Pi","title":"Response","text":"","category":"section"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.3.1 (2019-12-30)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |","category":"page"},{"location":"chapterx11/#Create-symbolic-link-1","page":"11. Creating containers on the Raspberry Pi","title":"Create symbolic link","text":"","category":"section"},{"location":"chapterx11/#","page":"11. Creating containers on the Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"ln -s /home/rob/julia/julia-1.3.1/bin/julia /usr/local/bin/julia","category":"page"},{"location":"chapter15/#.-Implementing-AppliAR-(Accounts-Receivable)-Package-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15. Implementing AppliAR (Accounts Receivable) Package","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter15/#Contents-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"Contents","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"Pages = [\"chapter15.md\"]","category":"page"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"See also: Developing Julia Packages","category":"page"},{"location":"chapter15/#Step-1-Create-a-package-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"Step 1 - Create a package","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"Create the local package AppliAR (Accounts Receivable)\nCreate the GitHub Repository AppliAR.jl\nPush local repostitory to GitHub","category":"page"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"","category":"page"},{"location":"chapter15/#Step-1.1-Create-the-local-package-AppliAR-(Accounts-Receivable)-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"Step 1.1 - Create the local package AppliAR (Accounts Receivable)","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"Prerequisites","category":"page"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"Ubuntu 18.04\nJulia 1.3 installed\nAtom installed\nGitHub account\nGitKraken installed\nTravis CI account","category":"page"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"Step Action Comment\n1 $ julia Start Julia.\n2 julia> ] Select the Package REPL.\n3 pkg> add PkgTemplates Install PkgTemplates.jl\n4 pkg> BackSpace Back to the Julia REPL.\n5 Paste the following code into the Julia REPL ","category":"page"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"julia> using PkgTemplates # Start the PkgTemplates package\n\njulia> t2 = Template(; # Create the template\n              user=\"rbontekoe\",\n              license=\"MIT\",\n              authors=[\"Rob Bontekoe\"],\n              julia_version=v\"1.3\",\n              ssh=true,\n              plugins=[\n                  TravisCI(),       # Continious Integration\n                  Codecov(),        # Improve your code review\n                  Coveralls(),      # Which parts aren’t covered by your test suite\n                  AppVeyor(),       # CI/CD service\n                  GitHubPages(),    # Documentation\n              ],\n   )\n\njulia> generate(t, \"AppliAR\") # Create the local package in ~/.julia/dev","category":"page"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":":––––– :––––– :–––––\n1 $ julia Start Julia.","category":"page"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"julia> 1 + 2","category":"page"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"| 2 | Etc. | |","category":"page"},{"location":"chapter15/#Step-1.2-Create-the-GitHub-Repository-AppliAR.jl-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"Step 1.2 - Create the GitHub Repository AppliAR.jl","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"Step Action Comment\n1 https://github.com.<YOURNAME> Go to your GitHub account.\n2 Click on the Tab Repositories \n3 Click on the button New \n4 type: AppliAR.jl Type your package name ending with .jl in the Repository name field.\n5 Click on the button Create repository ","category":"page"},{"location":"chapter15/#Step-1.3-Push-local-repostitory-to-GitHub-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"Step 1.3 - Push local repostitory to GitHub","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"|Step     | Action      | Comment | |:––––– | :––––– |:––––– |","category":"page"},{"location":"chapter15/#Step-2-Implement-the-AppliAR-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"Step 2 - Implement the AppliAR","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"\n\n","category":"page"},{"location":"chapter15/#Step-3-Creating-the-Domain-items-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"Step 3 - Creating the Domain items","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"\n\n","category":"page"},{"location":"chapter15/#Step-4-Creating-the-API-functions-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"Step 4 - Creating the API functions","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"\n\n","category":"page"},{"location":"chapter15/#Step-5-Creating-the-API-tests-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"Step 5 - Creating the API tests","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"\n\n","category":"page"},{"location":"chapter15/#Step-6-Creating-the-Infrastructure-functions-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"Step 6 - Creating the Infrastructure functions","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"\n\n","category":"page"},{"location":"chapter15/#Step-7-Creating-the-Infra-tests-1","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"Step 7 - Creating the Infra tests","text":"","category":"section"},{"location":"chapter15/#","page":"15 - Implementing AppliAR (Accounts Receivable) Package","title":"15 - Implementing AppliAR (Accounts Receivable) Package","text":"\n\n","category":"page"},{"location":"chapter3/#.-Create-and-Test-Domain.jl-1","page":"3 - Create and Test Domain.jl","title":"3. Create and Test Domain.jl","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"To get experience with Julia and modules, we will build an application where we can register and retrieve persons.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"You start with creating the sub-module file Domain.jl. Then you define in Domain.jl:","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"the objects Address and Person.\nthe enumerator AddressType with the values EMAIL and WORK.\nthe local function create_key, which will create a unique key based on the time of creation and address.\nthe objects that are accessible by other modules.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Finally, you define the test code in the file runtests.jl.","category":"page"},{"location":"chapter3/#Contents-1","page":"3 - Create and Test Domain.jl","title":"Contents","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Pages = [\"chapter3.md\"]","category":"page"},{"location":"chapter3/#Domain.jl-Domain-Objects-1","page":"3 - Create and Test Domain.jl","title":"Domain.jl - Domain Objects","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"On the Domain page, you define the custom data structures that make-up your domain.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"To define a data structure and type, use the keyword struct. The body consists of the fields of the data structure. A struct is a non-mutable object unless you precede it with the keyword mutable.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Use constructors to define standard values. It simplifies the creating of an object.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"module Domain #1\n\nusing Dates #2\n\nexport Person, Address, AddressType, EMAIL, WORK #3\n\n# local function to generate an unique id\ncreate_key(name::String) = string(hash(name * string(time()))) #4\n\n# enumerated type for an address.\n@enum AddressType EMAIL WORK #5\n\nstruct Address #6\n  id::String\n  created::DateTime\n  address_type::AddressType\n  address::String\n  #constructors\n  Address(address_type, address) = new(create_key(address), now(), address_type, address)\nend # Address\n\nstruct Person #7\n  id::String\n  created::DateTime\n  name::String\n  addresses::Array{Address, 1}\n  #constructors\n  Person(name) = new(create_key(name), name, [])\n  Person(name, addresses) = new(create_key(name), now(), name, addresses)\nend\n\nend\n","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"#1 Module names start with a capital letter. See Blue: a Style Guide for Julia","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"#2 If you need date functions like time(), date(), or now() you have the activate the Dates package.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"#3 Define what other modules default see when they want to use the sub-module Domain.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"#4 We use the hash-function to generate an unique id. You use * to concatenate Strings in Julia.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"#5 The AddressTypes that you allow in an Address object.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"#6 The structure of the Address datatype. The constructor Address(address_type, address) allows the user to only specify the AddressType and the address. The fields id and created are generated by Julia code.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"#7 The Person datatype. The fields id and created are generated by Julia code. When you don't specify an address, the software creates an empty array. Later on, you can add addresses using the push! function.","category":"page"},{"location":"chapter3/#Activity-3.1-Create-the-File-Domain.jl-in-the-src-folder-1","page":"3 - Create and Test Domain.jl","title":"Activity 3.1 - Create the File Domain.jl in the src-folder","text":"","category":"section"},{"location":"chapter3/#Prerequisites-(activities-in-chapter-2)-1","page":"3 - Create and Test Domain.jl","title":"Prerequisites (activities in chapter 2)","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Activity 2.1 - Setup the Development Environment.\nActivity 2.2 - Create the Accounts module.\nActivity 2.3 - Create a Repository on GitHub.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"In this activity you:","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Create the file Domain.jl.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Step Action Comment\n1 Go to the ~/.julia/dev/Accounts folder \n2 Right click on: src \n3 Select: New file \n4 Type: Domain.jl A file that represents a module starts with a capital letter.\n5 Press: <Enter> A new document appears in the pane next to the navigation pane.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"In the navigation pane you see the next folders and files:","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"ᵥ📁 Accounts\n  ᵥ📁 src\n     📄 Accounts.jl\n     📄 Domain.jl","category":"page"},{"location":"chapter3/#Activity-3.2-Pasting-the-Domain-Code-into-Domain.jl-1","page":"3 - Create and Test Domain.jl","title":"Activity 3.2 - Pasting the Domain Code into Domain.jl","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"In this activity you:","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Add the Domain code to the file Domain.jl.\nSave the file.","category":"page"},{"location":"chapter3/#Prerequisites-1","page":"3 - Create and Test Domain.jl","title":"Prerequisites","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"The previous activity 3.1","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Step Action Comment\n1 Select the code from the section Domain.jl-Domain-objects \n2 Ctrl-C Copy the code to the clipboard.\n3 Paste the code in the file Domain.jl \n4 Ctrl-S Save the file.","category":"page"},{"location":"chapter3/#Modified-Accounts.jl-1","page":"3 - Create and Test Domain.jl","title":"Modified Accounts.jl","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"module Accounts\n\ninclude(\"Domain.jl\"); using .Domain #1\n\nend","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"#1 the function include loads the code of the specified file. using .Domain activates the module. The dot refers to a sub-module of Accounts. The ; separates the two Julia statements.","category":"page"},{"location":"chapter3/#Activity-3.3-Update-Accounts.jl-1","page":"3 - Create and Test Domain.jl","title":"Activity 3.3 - Update Accounts.jl","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"In this activity you declare Domain as a sub-module of Accounts.","category":"page"},{"location":"chapter3/#Prerequisites-2","page":"3 - Create and Test Domain.jl","title":"Prerequisites","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"The previous activity 3.2","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Step Action Comment\n1 Open Accounts.jl \n2 Delete all lines \n3 Copy the code Modified Accounts.jl into the file \n4 Ctrl-S Save the file.","category":"page"},{"location":"chapter3/#Dependencies-1","page":"3 - Create and Test Domain.jl","title":"Dependencies","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"You declare all dependencies of your module in the file Project.toml under the section [deps]. The now()-function belongs to Dates module. Dates is a sub-module of Julia and should be loaded in your code by using Dates.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"When someone adds our module Accounts it automatically loads the right dependency version.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"name = \"Accounts\"\nuuid = \"a1b4bf14-7ec5-4e42-8992-fb1d0e08b0e4\"\nauthors = [\"Rob Bontekoe <rbontekoe@appligate.nl> and contributors\"]\nversion = \"0.1.0\"\n\n[deps]\nDates = \"ade2ca70-3891-5945-98fb-dc099432e06a\"\n\n[compat]\njulia = \"1\"\n\n[extras]\nTest = \"8dfed614-e22c-5e08-85e1-65c5234f0b40\"\n\n[targets]\ntest = [\"Test\"]","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Fig 3.1","category":"page"},{"location":"chapter3/#Activity-3.4-Adding-Dates-as-Dependency-1","page":"3 - Create and Test Domain.jl","title":"Activity 3.4 - Adding Dates as Dependency","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"In this activity you will:","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Activate the Accounts environment.\nAdd the dependency Dates to the environment and Project.toml.\nInspect the status of the work environment.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"You automatically add dependencies to the file Project.toml when you switch to the Accounts environment.","category":"page"},{"location":"chapter3/#Prerequisites-3","page":"3 - Create and Test Domain.jl","title":"Prerequisites","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"The previous activity 3.3","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Step Action Comment\n1 Open the Julia REPL Juno > Open REPL.\n2 Press: <Enter> Start Julia.\n3 jullia> ] Type ] to activate the package manager.\n4 pkg> activate . Activate the Accounts environment.\n5 (Accounts) pkg> status Show Accounts loaded packages (dependencies)\n6 (Accounts) pkg> add Dates Add the Dates module.\n7 (Accounts) pkg> st Show your dependencies. You can abbreviate your commands. Use the arrow-up button to retrieve previous commands.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Project Accounts v0.1.0\nStatus `~/.julia/dev/Accounts/Project.toml`\n  [ade2ca70] Dates","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Step Action Comment\n6 Press: BackSpace return to the Julia prompt.","category":"page"},{"location":"chapter3/#test_domain.jl-1","page":"3 - Create and Test Domain.jl","title":"test_domain.jl","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"using Pkg; Pkg.activate(\".\")\n\nimport Accounts: Domain\n\nusing .Domain\n\ndonald_email = Address(EMAIL, \"donald@duckcity.com\")\ndonald_work = Address(WORK,\n  \"\"\"\n  Donalds Hardware Store\n  attn. Donald Duck\n  1190 Seven Seas Dr\n  FL 32830 Lake Buena Vista\n  USA\n  \"\"\"\n)\n\naddresses = [donald_email, donald_work]\n\ndonald = Person(\"Donald Duck\", addresses)\n\nemail_address = filter(x -> x.address_type == EMAIL, donald.addresses)\n\nprintln(email_address[1].address)","category":"page"},{"location":"chapter3/#Activity-3.5-Testing-your-Code-1","page":"3 - Create and Test Domain.jl","title":"Activity 3.5 - Testing your Code","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Most of the time, you put the code that you want to test in a test file.","category":"page"},{"location":"chapter3/#Prerequisites-4","page":"3 - Create and Test Domain.jl","title":"Prerequisites","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"The previous activity 3.4","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Step Action Comment\n1 Create the file test_domain.jl \n2 Copy the test_domain.jl code into the file See: test_domain.jl\n3 Ctrl-S Save the file.\n4 Select the first line \n5 Shift-Enter The line will execute.\n6 Repeat until the last line. \n7 Ctrl-Enter The cursor stays on the current line.","category":"page"},{"location":"chapter3/#runtests.jl-1","page":"3 - Create and Test Domain.jl","title":"runtests.jl","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"It is even better to put you test code in the file runtests.jl. The file is located in the folder test.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"using Accounts\nusing Test\n\nimport Accounts: Domain\nusing .Domain\n\n@testset \"Domain.jl\" begin\n    donald_email = Address(EMAIL, \"donald@duckcity.com\")\n    donald = Person(\"Donald duck\", [donald_email])\n    email_addresses = filter(x -> x.address_type == EMAIL, donald.addresses)\n    @test email_addresses[1].address == \"donald@duckcity.com\"\nend","category":"page"},{"location":"chapter3/#Activity-3.6-runtests.jl-1","page":"3 - Create and Test Domain.jl","title":"Activity 3.6 - runtests.jl","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"You will:","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Add unit test code to the file runtests.jl.\nTest the module Accounts.","category":"page"},{"location":"chapter3/#Prerequisites-5","page":"3 - Create and Test Domain.jl","title":"Prerequisites","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"The previous activity 3.4","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Step Action Comment\n1 $ atom . Start Atom/Juno.\n2 Select the folder: test Open the folder with runtests.jl.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"ᵥ📁 Accounts\n   📁 src\n  ᵥ📁 test\n     📄 runtests.jl","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Step Action Comment\n3 Open file: runtests.jl Open the file.\n4 Copy and paste the code from section runtests.jl See: runtests.jl\n5 Ctrl-S Save the file.\n6 julia> ] Activate the package manager.\n7 pkg> activate . Activate the Accounts environment.\n8 (Accounts) Pkg> st Check whether Dates is loaded. See activity 3.3.\n9 (Accounts) Pkg>  test Accounts Run the test code. The result is:","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Test Summary: | Pass  Total\nDomain.jl     |    1      1\n    Testing Accounts tests passed","category":"page"},{"location":"chapter3/#Activity-3.7-Update-your-GitHub-Repository-1","page":"3 - Create and Test Domain.jl","title":"Activity 3.7 - Update your GitHub Repository","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"It is time to push our changes to the GitHub repository. The easiest way is to use Atom/Juno. The Git pane have to be visible.","category":"page"},{"location":"chapter3/#Prerequisites-6","page":"3 - Create and Test Domain.jl","title":"Prerequisites","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"The previous activity 3.6","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Step Action Comment\n1 Shift+Ctrl-9 Open the Git-pane when it is not visible.\n2 Place your cursor in the field Commit message \n3 Type: Add Domain.jl sub-module \n4 Stage the changed files Click on Stage All in the upper right corner of the Git-pane.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"You see a list of changed (ocher) and new (green) files (Domain.jl and test_domain.jl) in the section Staged Changes of the pane.","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Project.toml\nsrc/Accounts.jl\nsrc/Domain.jl\nsrc/test_domain.jl\ntest/runtests.jl","category":"page"},{"location":"chapter3/#","page":"3 - Create and Test Domain.jl","title":"3 - Create and Test Domain.jl","text":"Step Action Comment\n5 Click on: Commit to master \n6 Click on the Push button The Push-button is located at the lower right corner.\n7 Go to GitHub and check whether your changes are visible ","category":"page"},{"location":"chapter10/#.-The-Infrastructure-Sub-module-1","page":"10 - The Infrastructure Sub-module","title":"10. The Infrastructure Sub-module","text":"","category":"section"},{"location":"chapter16/#PosgreSQL-1","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"","category":"section"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter16/#Contents-1","page":"16 - PosgreSQL","title":"Contents","text":"","category":"section"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"Pages = [\"chapter16.md\"]","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"urls","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"https://www.postgresql.org/download/linux/ubuntu/\nhttps://linuxize.com/post/how-to-install-postgresql-on-ubuntu-18-04/\nhttps://www.a2hosting.com/kb/developer-corner/postgresql/managing-postgresql-databases-and-users-from-the-command-line","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"sudo apt install libpq5","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"====","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"Naar https://www.postgresql.org/download","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"kies Ubuntu","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"kies Bionic(18.04)","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"in bestand /etc/apt/sources.list.d/pgdg.list, zet:","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"wget –quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"sudo apt-get update","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"====","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"$ sudo apt install postgresql postgresql-contrib","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"$ sudo -u postgres psql -c \"SELECT version();\"","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"====","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"$ sudo su - postgres","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"postgres@rob-Lenovo-Y520-15IKBN:~$ createuser –interactive –pwprompt","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"postgres@rob-Lenovo-Y520-15IKBN:~$ createdb johndb","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"postgres@rob-Lenovo-Y520-15IKBN:~$ psql","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"postgres=# grant all privileges on database johndb to john;","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"====","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"$ sudo service postgresql restart","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"====","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"$ julia","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"julia> using DataFrames","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"julia> using LibPQ","category":"page"},{"location":"chapter16/#","page":"16 - PosgreSQL","title":"16 - PosgreSQL","text":"julia> conn = LibPQ.Connection(\"host=localhost dbname=johndb user=john password=xxxxxxx\")","category":"page"},{"location":"chapterx19/#.-Activity-diagrams-1","page":"19. Activity diagrams","title":"19. Activity diagrams","text":"","category":"section"},{"location":"chapterx19/#","page":"19. Activity diagrams","title":"19. Activity diagrams","text":"Old stuff I want to keep!","category":"page"},{"location":"chapterx19/#General-Ledger-workflow-1","page":"19. Activity diagrams","title":"General Ledger - workflow","text":"","category":"section"},{"location":"chapterx19/#","page":"19. Activity diagrams","title":"19. Activity diagrams","text":"⚉ process(entries::JournalEntry)\n↓\narchive(::Array{JournalEntry})\n↓\nbook(::Array{JournalEntry)::Array{Record}\n↓\n◉","category":"page"},{"location":"chapterx19/#Sales-workflow-1","page":"19. Activity diagrams","title":"Sales - workflow","text":"","category":"section"},{"location":"chapterx19/#","page":"19. Activity diagrams","title":"19. Activity diagrams","text":"⚉ process()::Array{:Order}\n↓\ncreate_training()::Training\n↓\ncreate_org()::Organization\n↓\ncreate_order()::Order\n↓\n◉","category":"page"},{"location":"chapter9/#.-The-API-Sub-module-1","page":"9 - The API Sub-module","title":"9. The API Sub-module","text":"","category":"section"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"The API consists of functions that operate on the domain elements, for example:","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"Create an invoice from an order.\nCreate a paid invoice from an unpaid invoice.\nCreate a journal entry for the general ledger.","category":"page"},{"location":"chapter9/#Contents-1","page":"9 - The API Sub-module","title":"Contents","text":"","category":"section"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"Pages = [\"chapter9.md\"]","category":"page"},{"location":"chapter9/#API.jl-1","page":"9 - The API Sub-module","title":"API.jl","text":"","category":"section"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"Example for creating an unpaid invoice from an order.","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"include(\"./spec.jl\")\n\nimport ..AppliAR: Domain\nusing .Domain #1\n\nusing Dates\n\nimport AppliSales: Order # Order is not exported but is refered to in the next function #2\nimport AppliGeneralLedger: create_journal_entry #3\n\nexport create, conv2entry\n\n\ncreate(order::Order, invoice_id::String)::UnpaidInvoice = begin #4\n    meta = MetaInvoice(order.id, order.training.id)\n    header_invoice = Header(\n\t\t    invoice_id, order.org.name, order.org.address, order.org.zip, order.org.city, order.org.country, order.order_ref, order.contact_name, order.contact_email)\n    body_invoice = OpentrainingItem(order.training.name, order.training.date, order.training.price, order.students)\n\treturn UnpaidInvoice(invoice_id, meta, header_invoice, body_invoice)\nend","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"#1 The API layer can only use elements from the inner Domain layer.","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"#2 Order is defined in the package AppliSales.","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"#3 We borrow the function from the AppliGeneralLedger package. The API function conv2entry uses it to create JournalEntry's for the package. Our module depends on AppliSales and AppliGeneralLedger and must be defined in Project.toml.","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"#4 The function that returns an UnpaidInvoice.","category":"page"},{"location":"chapter9/#Case-Study-Part-Two-Redefining-BodyItem-as-a-Concrete-Datatype-1","page":"9 - The API Sub-module","title":"Case Study Part Two - Redefining BodyItem as a Concrete Datatype","text":"","category":"section"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"In Case Study Part One we decided to replace OpentrainingItem by the to concrete prompted data type BodyItem.","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"students = \"Attendees: \" * reduce((x, y) -> x * \", \" * y, order.students)\ndescription  = [order.training.name, \"Date: \" * string(Date(order._date)), students]\n\nbody = BodyItem(\n  order.training.name, # code\n  length(order.students), # quantity\n  description, # descr\n  order._price_per_student, # unit_price\n  order._vat_perc # vat\n  )","category":"page"},{"location":"chapter9/#Advantage-of-API-as-Sub-Module.-1","page":"9 - The API Sub-module","title":"Advantage of API as Sub-Module.","text":"","category":"section"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"The line export create, conv2entry works for me as an interface. The Infrastructure layer uses these functions. We can change the inner working without facing problems with the Infrastructure layer. We should not forget to export BodyItem in the Domain module.","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"#export OpentrainingItem, name_training, date, price_per_student, students, vat_perc\nexport BodyItem, code, descr, unit_price, quantity, vat","category":"page"},{"location":"chapter9/#Exercise-9.1-Change-the-code-according-to-case-study-one-and-two-1","page":"9 - The API Sub-module","title":"Exercise 9.1 - Change the code according to case study one and two","text":"","category":"section"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"Go to the folder ~/.julia/dev/\nClone AppliAR.jl: git clone https://github.com/rbontekoe/AppliAR.jl.git\nStart Atom/Juno\nStart the Julia REPL\nActivate the local environment (pkg> activate .)\nRun the tests (pkg> test AppliAR)\nClose Atom/Juno\nCreate a git branch (git branch dev)\nActivate the branch (git checkout dev)\nStart Atom/Juno","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"Creating a branch in git give you the possibility to experiment.","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"Make the changes according to case study one and two.\nRun the test again (pkg> test AppliAR).\nWhen everything is working well execute the following code from the master branch.","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"$ git git checkout master\n\n$ git merge dev\n\n$ git branch -d dev # remove the dev branch","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"run the tests again.","category":"page"},{"location":"chapter9/#","page":"9 - The API Sub-module","title":"9 - The API Sub-module","text":"When you cooperate ith others on a project you cav create a PR or Pull Request.","category":"page"},{"location":"chapter11/#.-Creating-SSH-Enabled-Containers-1","page":"11 - Creating SSH Enabled Containers","title":"10. Creating SSH Enabled Containers","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter11/#Contents-1","page":"11 - Creating SSH Enabled Containers","title":"Contents","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Pages = [\"chapter11.md\"]","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"The article Dockerize an SSH service uses Ubuntu 16.04 as the base image. However, Julia 1.0 and higher needs Ubuntu 18.04, so we have changed the Dockerfile. This version of Ubuntu also requires that you create a user with administrator rights when you use SSH to connect.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"You also learn to install Julia in the container.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"To make use of passwordless connections between containers, you also learn to create SSH keys.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"In the next chapter, we will show you how to create containers on a Raspberry Pi 3B. I have another project running where I communicate with a Raspberry Pi to transfer images to my laptop.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"See also the Pact book Julia 1.0 Programming: Installing Julia from binaries","category":"page"},{"location":"chapter11/#Activity-1-Create-local-SSH-keys-1","page":"11 - Creating SSH Enabled Containers","title":"Activity 1 - Create local SSH keys","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Prerequisites:","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Your system has Ubuntu 18.04 that runs on an Intel x86 processor.\nYou have started your computer.\nYou haven't created the keys before.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Steps:","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Check previous created keys.\nCreate local SSH keys.","category":"page"},{"location":"chapter11/#.-Check-previous-created-keys-1","page":"11 - Creating SSH Enabled Containers","title":"1. Check previous created keys","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n1 $ ls -l .ssh ","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Response","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"ls: cannot access '.ssh': No such file or directory","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"You haven't created the key before, go to step 2.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"total 16\n-rw-r--r-- 1 root root  107 nov 13 10:57 config\n-rw------- 1 rob  rob  3247 okt 16 15:04 id_rsa\n-rw-r--r-- 1 rob  rob   748 okt 16 15:04 id_rsa.pub\n-rw-r--r-- 1 rob  rob   444 dec  3 14:59 known_hosts","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"You have created the keys before, no further action is required. The file id_rsa.pub contains your public key. Later on, we will create a copy of it in the SSH enabled container.","category":"page"},{"location":"chapter11/#.-Create-local-SSH-keys-on-your-computer-1","page":"11 - Creating SSH Enabled Containers","title":"2. Create local SSH keys on your computer","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n1 $ sudo apt-get update \n2 $ sudo apt-get install openssh-client Install ssh client on Ubuntu.\n3 $ ls -al ~/.ssh/id_*.pub View old keys.\n4 $ ssh-keygen -t rsa -b 4096 -C \"your_email@domain.com\" Generate the key.\n5 $ ls ~/.ssh/id_* View your new keys.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"See SSH Connection Refused (Causes & Solutions)","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n6 $ chmod 700 ~/.ssh Change right the folder .ssh\n7 $ chmod 600 ~/.ssh/authorized_keys Change right of the file authorized_keys","category":"page"},{"location":"chapter11/#Activity-2-Create-the-Container-1","page":"11 - Creating SSH Enabled Containers","title":"Activity 2 - Create the Container","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Prerequisites:","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Your system has Ubuntu 18.04 that runs on an Intel x86 processor.\nYou have started your computer.\nYou have installed Docker (See appendix).","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Steps:","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Create a Dockerfile in the folder test_sshd.\nCreate a Docker image eg_ssdh and the container test_sshd.\nCreate a user rob, who has administrator rights.","category":"page"},{"location":"chapter11/#The-Dockerfile-1","page":"11 - Creating SSH Enabled Containers","title":"The Dockerfile","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"FROM ubuntu:18.04\n\nRUN apt-get update && apt-get install -y openssh-server\nRUN mkdir /var/run/sshd\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nENV NOTVISIBLE \"in users profile\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\n\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]","category":"page"},{"location":"chapter11/#.-Create-a-Dockerfile-in-the-folder-test_ssh-1","page":"11 - Creating SSH Enabled Containers","title":"1. Create a Dockerfile in the folder test_ssh","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n2 $ sudo mkdir test-ssh Create a new folder.\n3 $ cd test-ssh Go to the folder.\n4 Select the content of the Dockerfile above \n5 Ctrl-C Copy the selected text to the clipboard.\n6 $ nano Dockerfile Create a new empty file.\n7 Shift-Ctrl-V Paste text from the clipboard into nano.\n8 Ctrl-O <Enter> Save the file.\n9 Ctrl-X Exit nano.","category":"page"},{"location":"chapter11/#.-Create-a-Docker-image-eg_sshd-and-the-container-test_sshd-1","page":"11 - Creating SSH Enabled Containers","title":"2. Create a Docker image eg_sshd and the container test_sshd","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n1 $ docker build -t eg_sshd . Create a Docker image from the Dockerfile\n2 $ docker run -d -p 2222:22 --name test_sshd eg_sshd Create a container\n3 $ docker exec -it test_sshd bash Enter the container\n4 Ctrl-D Leave the container.","category":"page"},{"location":"chapter11/#.-Create-a-user-rob,-who-has-administrator-rights-1","page":"11 - Creating SSH Enabled Containers","title":"3. Create a user rob, who has administrator rights","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n1 $ docker exec -it test_sshd bash Enter the container\n2 # adduser rob ","category":"page"},{"location":"chapter11/#Response-1","page":"11 - Creating SSH Enabled Containers","title":"Response","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Adding user `rob' ...\nAdding new group `rob' (1000) ...\nAdding new user `rob' (1000) with group `rob' ...\nThe home directory `/home/rob' already exists.  Not copying from `/etc/skel'.\nadduser: Warning: The home directory `/home/rob' does not belong to the user you are currently creating.\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully\nChanging the user information for rob\nEnter the new value, or press ENTER for the default\n\tFull Name []: Rob Bontekoe\n\tRoom Number []:\n\tWork Phone []:\n\tHome Phone []:\n\tOther []:\nIs the information correct? [Y/n] Y","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"note: Note\nYou are asked to give the user rob a password. The password you will use in the future for the SSH connection to the container, so write it down. You need it the first time when you want to enable passwordless communication. From Ubuntu 18.04 on, you don't know the roots' password anymore. That is the reason we had to create a user with administrator rights for SSH connections.","category":"page"},{"location":"chapter11/#Next-steps-1","page":"11 - Creating SSH Enabled Containers","title":"Next steps","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n3 # usermod -aG sudo rob Give user administrator rights.\n4 # apt-get install sudo You act as root when you precede your commands with sudo. It is not installed yet in this minimized container.\n5 # su rob Switch to the user rob\n To run a command as administrator (user \"root\"), use \"sudo <command>\". \\nSee \"man sudo_root\" for details. \n5 Ctrl-D Back as root user.\n6 Ctrl-D Leave the container.","category":"page"},{"location":"chapter11/#Important?-1","page":"11 - Creating SSH Enabled Containers","title":"Important?","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n6 $ chmod 700 ~/.ssh Change right the folder .ssh\n7 $ chmod 600 ~/.ssh/authorized_keys Change right of the file authorized_keys","category":"page"},{"location":"chapter11/#Activity-3-Install-Julia-1","page":"11 - Creating SSH Enabled Containers","title":"Activity 3 - Install Julia","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Prerequisites:","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Your system has Ubuntu 18.04 running on the Intel x86 processor.\nThe container test_sshd exists.\nThe container has the user rob, who has administrators (sudo) rights.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Activity:","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Download the Julia binary and copy it to the container.\nInstall Julia and test the installation.\nCreate a symbolic link to start Julia from everywhere.","category":"page"},{"location":"chapter11/#.-Download-the-Julia-binary-and-copy-it-to-the-container-1","page":"11 - Creating SSH Enabled Containers","title":"1. Download the Julia binary and copy it to the container","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n1 Download Julia eg. julia-1.3.0-linux-x86_64.tar.gz\n2 $ docker ps -a Check whether container test_ssh exists.\n2 $ docker start test_sshd Start the container.\n3 $ docker cp julia-1.3.0-linux-x86_64.tar.gz test_sshd:/home/rob Copy the downloaded file to the container.\n4 $ docker exec -it test_sshd bash Enter the conatiner.","category":"page"},{"location":"chapter11/#Next-steps-2","page":"11 - Creating SSH Enabled Containers","title":"Next steps","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n5 $ su rob Switch to user rob.\n6 $ cd ~ Go to home directory.\n7 $ ls You see the file julia-1.3.0-linux-x86_64.tar.gz","category":"page"},{"location":"chapter11/#.-Install-Julia-and-test-the-installation-1","page":"11 - Creating SSH Enabled Containers","title":"2. Install Julia and test the installation","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n5 $ mkdir julia Create folder julia. OS asks for yur password.\n6 $ mv julia-1.3.0-linux-x86_64.tar.gz julia Move file to folder.\n7 $ cd julia Enter folder\n8 $ tar -zxvf julia-1.3.0-linux-x86_64.tar.gz Extract the file.\n9 $ ls List the content of the folder.\n julia-1.3.0  julia-1.3.0-linux-x86_64.tar.gz \n10 $ cd julia-1.3.0/bin/ We will test Julia.\n11 $ sudo ./julia Start Julia.","category":"page"},{"location":"chapter11/#Response-2","page":"11 - Creating SSH Enabled Containers","title":"Response","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.3.0 (2019-11-26)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia>","category":"page"},{"location":"chapter11/#.-Create-a-symbolic-link-to-start-Julia-from-anywhere-1","page":"11 - Creating SSH Enabled Containers","title":"3. Create a symbolic link to start Julia from anywhere","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n12 Ctrl-D Leave Julia.\n13 cd ~ To home directory.\n14 $ sudo ln -s /home/rob/julia/julia-1.3.0/bin/julia /usr/local/bin/julia Create link.\n15 $ julia Start Julia.","category":"page"},{"location":"chapter11/#Activity-4-Test-the-container.-1","page":"11 - Creating SSH Enabled Containers","title":"Activity 4 - Test the container.","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Prerequisites:","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"You have an SSH enabled container.\nYou have created the SSH authorized_keys See.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Steps:","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Copy your public key to the container.\nTest the SSH connection with the container.","category":"page"},{"location":"chapter11/#.-Copy-your-public-key-to-the-container-1","page":"11 - Creating SSH Enabled Containers","title":"1. Copy your public key to the container","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n1 $ docker ps Check whether the container is already running.\n2 $ docker start test_sshd Start the container if not running.\n3 $ docker port test_sshd 22 Find the port number\n 0.0.0.0:32768 Port number is 32768.\n4 $ ssh-copy-id  rob@localhost -p 32769 Copy file to container\n5 $ ssh rob@localhost -p 32768 Connect to the container.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Enter y, and continue.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"The authenticity of host '[localhost]:32768 ([127.0.0.1]:32768)' can't be established.\nECDSA key fingerprint is SHA256:lix3DGk69mhTnPlb0WE70syuDWVh59XL3az/4UJDInc.\nAre you sure you want to continue connecting (yes/no)? yes","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Type your password.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nrob@localhost's password:","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Then some instructions.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Number of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh -p '32769' 'rob@localhost'\"\nand check to make sure that only the key(s) you wanted were added","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"info: Info\nYour keys are stored in the folder /etc/ssh/.","category":"page"},{"location":"chapter11/#.-Test-the-SSH-connection-with-the-container.-1","page":"11 - Creating SSH Enabled Containers","title":"2. Test the SSH connection with the container.","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Step Action Comment\n1 ssh rob@localhost -p 32768 ","category":"page"},{"location":"chapter11/#Response-3","page":"11 - Creating SSH Enabled Containers","title":"Response","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 5.0.0-37-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\nThis system has been minimized by removing packages and content that are\nnot required on a system that users do not log into.\n\nTo restore this content, you can run the 'unminimize' command.\nLast login: Thu Dec  5 12:16:21 2019 from 172.17.0.1\nrob@13304c03391d:~$","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"info: Info\nYou can also work with the docker network address.docker inspect test_sshd | grep \"IPAddress\"The response is:\"SecondaryIPAddresses\": null,\n\"IPAddress\": \"172.17.0.2\",\n        \"IPAddress\": \"172.17.0.2\",You can also use:ssh rob@172.17.0.2","category":"page"},{"location":"chapter11/#Exercise-1","page":"11 - Creating SSH Enabled Containers","title":"Exercise","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"Create a second container test_sshd2:","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"You don't have to create the keys again!\nUse the same image eg_sshd.\nCheck the port number of test_sshd2.\nName of the administrative user can be kept the same: rob.","category":"page"},{"location":"chapter11/#","page":"11 - Creating SSH Enabled Containers","title":"11 - Creating SSH Enabled Containers","text":"We will use both containers in chapter 11.","category":"page"},{"location":"chapterx8/#.-Documenting-your-code-1","page":"8. Documenting your code","title":"8. Documenting your code","text":"","category":"section"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"Under development!","category":"page"},{"location":"chapterx8/#What-you-will-learn-1","page":"8. Documenting your code","title":"What you will learn","text":"","category":"section"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"Pages = [\"chapter8.md\"]","category":"page"},{"location":"chapterx8/#An-example-1","page":"8. Documenting your code","title":"An example","text":"","category":"section"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"You can document your code, which the user can see when one uses Julia's help. Place the whole between three quotation marks, just above a function. The first line starts with four spaces, followed by the syntax of the function. On the next lines, you can tell what it does.","category":"page"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"You can also use an example. Start with # Example with on the next lines the case enclosed between three back-ticks. It can be the code you copied from the REPL.","category":"page"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"Example","category":"page"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"\"\"\"\n    create(order::Order, invoice_id::String)::UnpaidInvoice\n\nCreate an UnpaidInvoice from an AppliSales.Order\n\n# Example\n````jldoctest #1 #2\njulia> using AppliAR\n\njulia> using AppliSales\n\njulia> orders = AppliSales.process()\n\njulia> invnbr = 1000\n\njulia> invoices = [create(order, \"A\" * string(global invnbr += 1)) for order in orders]\n```` #1\n\"\"\"\ncreate(order::Order, invoice_id::String)::UnpaidInvoice = begin\n    meta = MetaInvoice(order.id, order.training.id)\n    header_invoice = Header(\n            invoice_id, order.org.name, order.org.address, order.org.zip, order.org.city, order.org.country, order.order_ref, order.contact_name, order.contact_email)\n    body_invoice = OpentrainingItem(order.training.name, order.training.date, order.training.price, order.students)\n    return UnpaidInvoice(invoice_id, meta, header_invoice, body_invoice)\nend","category":"page"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"#1 - Replace the four back-ticks by three back-ticks.","category":"page"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"#2 - documenter.jl tests the code when it encounters jldoctest.","category":"page"},{"location":"chapterx8/#Activity-8.1-Using-Help-1","page":"8. Documenting your code","title":"Activity 8.1 - Using Help","text":"","category":"section"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"Step Action Comment\n1 Start Julia \n2 julia> ] Activate Package Manager.\n3 pkg> add https://github.com/rbontekoe/AppliInvoicing.jl Add AppliInvoicing. Use update when you already added the package.\n4 pkg>  Ctrl-C Back to Julia.\n5 julia> using AppliInvoicing \n6 Julia> ? Go to the Help mode.\n7 help?> create Search for the create functions. Julia displays two create methods.","category":"page"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"The first method is create(order::Order, invoice_id::String)::UnpaidInvoice:","category":"page"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"search: create searchsortedlast\n\n  create(order::Order, invoice_id::String)::UnpaidInvoice\n\n  Create an UnpaidInvoice from an AppliSales.Order\n\n  Example\n  ≡≡≡≡≡≡≡≡≡\n\n  julia> using AppliInvoicing\n\n  julia> using AppliSales\n\n  julia> orders = AppliSales.process()\n\n  julia> invnbr = 1000\n\n  julia> invoices = [create(order, \"A\" * string(global invnbr += 1)) for order in orders]\n\n  ───────────────────────────────────────────────────────────────────\n","category":"page"},{"location":"chapterx8/#","page":"8. Documenting your code","title":"8. Documenting your code","text":"Step Action Comment\n8 Select the code under example to the clipboard Including the julia> prompts.\n9 Ctrl-C Copy the code to the clipboard.\n9 julia> Ctrl-V Paste the code at the julia> prompt. Immediately, Julia executes the code.","category":"page"},{"location":"notebook/#IJulia-Notebook-1","page":"IJulia Notebook","title":"IJulia Notebook","text":"","category":"section"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Whenever possible I like to create the course environment in a Docker container, for the instructor and for the students.","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"In online courses, I use my machine as IJulia Notebook server.","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Ideas are from Andre Ferrari","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Pages = [\"notebook.md\"]","category":"page"},{"location":"notebook/#What-is-a-notebook?-1","page":"IJulia Notebook","title":"What is a notebook?","text":"","category":"section"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"In this case, \"notebook\" or \"notebook documents\" denote documents that contain both code and rich text elements, such as figures, links, equations, ... Because of the mix of  code and text elements, these documents are the ideal place to bring together an analysis description, and its results, as well as, they can be executed perform the data analysis in real tme.See","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Top","category":"page"},{"location":"notebook/#Options-to-use-a-notebook-1","page":"IJulia Notebook","title":"Options to use a notebook","text":"","category":"section"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"You have several option to work with IJulia:","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"You have installed Julia on your own machine.\nYou have installed Docker on your own machine and run IJulia from a container with Julia and IJulia installed.\nYou make use of the IJulia server installed on the machne of your instructor.","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"The IJulia Notebook is installed on the machine of the instructor, but you can also install IJula on your own notebook. Follow the instruction in the appendix.","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Top","category":"page"},{"location":"notebook/#Starting-IJulia-1","page":"IJulia Notebook","title":"Starting IJulia","text":"","category":"section"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Ask your instructor for the public ip-address and the token.","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"The first time you enter the IJulia server, it will ask you one time for the token.","category":"page"},{"location":"notebook/#Login-to-the-IJulia-server-1","page":"IJulia Notebook","title":"Login to the IJulia server","text":"","category":"section"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Step Action Comment\n1 Start browser \n2 http://x.x.x.x:8888 Ask instructor for the complete the public ip-address of the IJulia server\n3 Enter the token in the Password or token field \n4 Click on the Log in button ","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Top","category":"page"},{"location":"notebook/#Create-a-new-notebook-1","page":"IJulia Notebook","title":"Create a new notebook","text":"","category":"section"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"(Image: Test)","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Step Action/Response Comment\n1 Click on work directory \n2 Click on button New Open New menu.\n3 Select on item Julia.x.x.x Create a new Julia Notebook.\n New Notebook is opened \n4 Place the cursor in the first cel In this cell you can type your code.\n5 println(\"Hello World!\") Type your Julia code.\n6 Shift-Enter Activate the code and create a new cell","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Top","category":"page"},{"location":"notebook/#Notebook-commands-1","page":"IJulia Notebook","title":"Notebook commands","text":"","category":"section"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Working with a Notebook is rather intuitive. Here are some commands you will often use.","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Command Comment\nShift-Enter Execute code and create a new cell below.\nCtrl-Enter Execute code and stay in the cell\nTab Code completion, e.g. printl-Tab => println.\nDouble Tab List with option, e.g. print-Tab displays print, println, and printstyled\n\\sqrt-tab Special characters, in this case √.\nEsc-A Create empty cell above the current cell.\nEsc-B Create empty cell below current cell.\nEsc-M Change to a markdown cell.\nEsc-Y Change to code cell.","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Click on the keyboard icon to see more options.","category":"page"},{"location":"notebook/#","page":"IJulia Notebook","title":"IJulia Notebook","text":"Top","category":"page"},{"location":"notebook/#Summary-1","page":"IJulia Notebook","title":"Summary","text":"","category":"section"},{"location":"chapter14/#.-Logging-1","page":"14 - Logging","title":"14. Logging","text":"","category":"section"},{"location":"chapter14/#","page":"14 - Logging","title":"14 - Logging","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter14/#Contents-1","page":"14 - Logging","title":"Contents","text":"","category":"section"},{"location":"chapter14/#","page":"14 - Logging","title":"14 - Logging","text":"Pages = [\"chapter14.md\"]","category":"page"},{"location":"chapter14/#","page":"14 - Logging","title":"14 - Logging","text":"This link looks interesting: Logging","category":"page"},{"location":"chapter14/#","page":"14 - Logging","title":"14 - Logging","text":"julia> using Logging\n\njulia> io = open(\"log.txt\", \"w+\");\n\njulia> logger = SimpleLogger(io);\n\njulia> with_logger(logger) do\n           @info(\" here is some context specific logging\")\n       end\n\nshell> cat log.txt\n\njulia> flush(io);\n\nshell> cat log.txt\n┌ Info:  here is some context specific logging\n└ @ Main REPL[7]:2\n\njulia> global_logger(logger);\n\njulia> @info(\"All logs will use the global logger by default.\");\n\nshell> cat log.txt\n┌ Info:  here is some context specific logging\n└ @ Main REPL[7]:2\n\njulia> close(io);\n\nshell> cat log.txt\n┌ Info:  here is some context specific logging\n└ @ Main REPL[7]:2\n┌ Info: All logs will use the global logger by default.\n└ @ Main REPL[12]:1","category":"page"},{"location":"chapter2/#.-Setup-the-Development-Environment-1","page":"2 - Setup the Development Environment","title":"2. Setup the Development Environment","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"In this chapter, you learn to create your development environment based on Ubuntu 20.04 and Julia version 1.5.","category":"page"},{"location":"chapter2/#Contents-1","page":"2 - Setup the Development Environment","title":"Contents","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Pages = [\"chapter2.md\"]","category":"page"},{"location":"chapter2/#Get-Experience-with-Modules-1","page":"2 - Setup the Development Environment","title":"Get Experience with Modules","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"To get experience with Julia and modules, we start with building an application where we can register and retrieve persons. The module name is Accounts.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"The activities are","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Activity 2.1 - Setup the Development Environment.\nActivity 2.2 - Create the Accounts module.\nActivity 2.3 - Create a Repository on GitHub.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"We use the Onion Architecture to define a model that consists of the layers Domain, API, and Infrastructure. The layers are declared as sub-modules. See also Domain-driven Design in section 2 Accounts Receivable of chapter 7 The design.","category":"page"},{"location":"chapter2/#The-Domain-layer-1","page":"2 - Setup the Development Environment","title":"The Domain layer","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"The domain has the objects Person, Address, and AddressType.","category":"page"},{"location":"chapter2/#The-API-layer-1","page":"2 - Setup the Development Environment","title":"The API layer","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"The API has the function create. It can be used for creating persons and addresses.","category":"page"},{"location":"chapter2/#The-Infrastructure-layer-1","page":"2 - Setup the Development Environment","title":"The Infrastructure layer","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Infrastructure has the functions save and retrieve to save and retrieve persons.","category":"page"},{"location":"chapter2/#Activity-3.1-Setup-the-Development-Environment-1","page":"2 - Setup the Development Environment","title":"Activity 3.1 - Setup the Development Environment","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"In this activity, you will create a development environment.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Install Julia.\nInstall Atom.\nInstall Juno.\nAdd the Julia package PkgTemplates.","category":"page"},{"location":"chapter2/#Prerequisites-1","page":"2 - Setup the Development Environment","title":"Prerequisites","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Ubuntu 20.04.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Step Action Comment\n1 Ctrl+Alt-T Open a terminal window.\n2 Install Julia Follow the Installation instructions.\n3 Install Git \n4 Install Atom \n5 Install Juno \n6 Close Atom \n7 $ julia Start Julia.\n8 julia> ] Go to the package manager.\n9 pkg> add PkgTemplates Install the PkgTemplates package.\n10 pkg> BackSpace Back to Julia REPL.\n11 julia> Ctrl-D Exit Julia","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Explore the file structure.","category":"page"},{"location":"chapter2/#Activity-3.2-Create-the-Accounts-Module.-1","page":"2 - Setup the Development Environment","title":"Activity 3.2 - Create the Accounts Module.","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"In this activity you will create the basic application file structure for the module Accounts using PkgTemplates:","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Create a template.\nCreate the module Accounts.\nGo to the development directory ~/.julia/dev/Accounts/.\nStart Atom/Juno.","category":"page"},{"location":"chapter2/#Prerequisites-2","page":"2 - Setup the Development Environment","title":"Prerequisites","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Activity 3.1:\nUbuntu 20.04.\nJulia 1.5 installed.\nAtom/Juno installed.\nGit installed.\nJulia PkgTemplates package installed.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Step Action Comment\n1 $ julia Start Julia.\n2 julia> using PkgTemplates Load PkgTemplates.\n3 julia> t = Template() Create a default template.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"  authors: [\"Rob Bontekoe <rbontekoe@appligate.nl> and contributors\"]\n  dir: \"~/.julia/dev\"\n  host: \"github.com\"\n  julia: v\"1.0.0\"\n  user: \"rbontekoe\"\n  plugins:\n    CompatHelper:\n      file: \"~/.julia/packages/PkgTemplates/aXRp5/templates/github/workflows/CompatHelper.yml\"\n      destination: \"CompatHelper.yml\"\n      cron: \"0 0 * * *\"\n    Git:\n      ignore: String[]\n      name: nothing\n      email: nothing\n      branch: nothing\n      ssh: false\n      jl: true\n      manifest: false\n      gpgsign: false\n    License:\n      path: \"~/.julia/packages/PkgTemplates/aXRp5/templates/licenses/MIT\"\n      destination: \"LICENSE\"\n    ProjectFile:\n      version: v\"0.1.0\"\n    Readme:\n      file: \"~/.julia/packages/PkgTemplates/aXRp5/templates/README.md\"\n      destination: \"README.md\"\n      inline_badges: false\n    SrcDir:\n      file: \"~/.julia/packages/PkgTemplates/aXRp5/templates/src/module.jl\"\n    TagBot:\n      file: \"~/.julia/packages/PkgTemplates/aXRp5/templates/github/workflows/TagBot.yml\"\n      destination: \"TagBot.yml\"\n      cron: \"0 0 * * *\"\n      token: Secret(\"GITHUB_TOKEN\")\n      ssh: Secret(\"DOCUMENTER_KEY\")\n      ssh_password: nothing\n      changelog: nothing\n      changelog_ignore: nothing\n      gpg: nothing\n      gpg_password: nothing\n      registry: nothing\n      branches: nothing\n      dispatch: nothing\n      dispatch_delay: nothing\n    Tests:\n      file: \"~/.julia/packages/PkgTemplates/aXRp5/templates/test/runtests.jl\"\n      project: false","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Step Action Comment\n4 julia> t(\"Accounts\") Create the application environment Accounts.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"[ Info: Running prehooks\n[ Info: Running hooks\n Activating environment at `~/.julia/dev/Accounts/Project.toml`\n   Updating registry at `~/.julia/registries/General`\n######################################################################## 100,0%\nNo Changes to `~/.julia/dev/Accounts/Project.toml`\nNo Changes to `~/.julia/dev/Accounts/Manifest.toml`\n Activating environment at `~/.julia/environments/v1.5/Project.toml`\n[ Info: Running posthooks\n[ Info: New package is at /home/rob/.julia/dev/Accounts","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Step Action Comment\n5 julia> Ctrl-D Exit Julia.\n6 $ cd ~/.julia/dev/Accounts/ Go to development folder.\n7 $ atom . Start Atom/Juno.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"You will see the following file structure.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"ᵥ📁 Accounts\n   📁 .git\n   📁 .github\n  ᵥ📁 src\n     📄 Accounts.jl #1\n  ᵥ📁 test\n     📄 runtests.jl #2\n   📄 .gitignore\n   📄 LICENCE\n   📄 Manifest.toml\n   📄 Project.toml #3\n   📄 README.md","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"#1 File with the name of the module where you define among other things:","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"sub-modules,\n(export) of the functions that others can invoke immediately,\nas well as data structures, and\n(import) of the elements, you want to use from other (sub-)modules or packages.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"#2 Unit tests.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"#3 Contains the module version and its dependencies.","category":"page"},{"location":"chapter2/#Activity-3.3-Create-a-Repository-on-GitHub-1","page":"2 - Setup the Development Environment","title":"Activity 3.3 - Create a Repository on GitHub","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"In this activity, you create a repository on GitHub. You can push changes in the design of the module to GitHub. Later on, you will learn how others can use the module.","category":"page"},{"location":"chapter2/#Prerequisites-3","page":"2 - Setup the Development Environment","title":"Prerequisites","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Ubuntu 20.04.\nJulia 1.5 installed.\nAtom/Juno installed.\nGit installed.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Step Action Comment\n1 Go to GitHub Create an account if you don't have one. What is GitHub?\n2 Click on the green button New Maybe you have first to click on the tab Repositories.\n3 Give the repository the name: Accounts.jl The extention .jl is mandatory.\n4 Give the repository a description E.g. A module for the BAWJ course with which you can experiment.","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"warning: Warning\nDon't change the default settings!","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Step Action Comment\n5 Click on the green button Create repository Button is located at the bottom side.\n6 Return to your computer and go to the folder ~/.julia/dev/Accounts \n7 $ git status The response is:","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"On branch master\nnothing to commit, working tree clean","category":"page"},{"location":"chapter2/#","page":"2 - Setup the Development Environment","title":"2 - Setup the Development Environment","text":"Step Action Comment\n8 $ atom . Start Atom/Juno.\n9 Click on the Publish button You will find the button in the lower right corner.\n10 Check the update on GitHub You should see the same file structure. Manifest.toml is missing.","category":"page"},{"location":"overview/#Overview-Julia-1","page":"Overview Julia","title":"Overview Julia","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Pages = [\"overview.md\"]","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"There are many excellent courses on Julia. We suppose that the reader has some basic knowledge of Julia, as in Think Julia. We recapitulate the most important differences with other languages.","category":"page"},{"location":"overview/#Concatenation-1","page":"Overview Julia","title":"Concatenation","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"In Julia is the asterisk (*) used as a concatenation symbol instead of the plus-sign (+) in other languages.","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"julia> a = \"Hello \"\n\"Hello\"\n\njulia> b = \"World!\"\n\"World!\"\n\njulia> c = a * b\n\"Hello World!\"","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Top","category":"page"},{"location":"overview/#Iteration-1","page":"Overview Julia","title":"Iteration","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"See Think Julia, 7. Iteration","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Some examples.","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"julia> range = 0:0.1:0.5π # values from 0 to 0.5π radians (90°), with a step value of 0.1 radian\n0.0:0.1:1.5\n\njulia> y = [sin(x) for x in range] # calculate sin for the values in the variable range\n16-element Array{Float64,1}:\n 0.0                \n 0.09983341664682815\n 0.19866933079506122\n 0.2955202066613396\n 0.3894183423086505\n 0.479425538604203  \n 0.5646424733950355\n 0.6442176872376911\n 0.7173560908995228\n 0.7833269096274834\n 0.8414709848078965\n 0.8912073600614354\n 0.9320390859672264\n 0.963558185417193  \n 0.9854497299884603\n 0.9974949866040544\n\njulia> using Plots\n\njulia> plot(x -> sin(x) , 0:0.1:2π) # passing a value to sin(x)\n\njulia> plot(sin, 0:0.1:2π) # works also\n","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Top","category":"page"},{"location":"overview/#Help-1","page":"Overview Julia","title":"Help","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"\njulia> ?\nhelp?> sin\nsearch: sin sinh sind sinc sinpi sincos asin using isinf asinh asind isinteger\n\n  sin(x)\n\n  Compute sine of x, where x is in radians.\n\n  ────────────────────────────────────────────────────────────────────────────\n\n  sin(A::AbstractMatrix)\n\n  Compute the matrix sine of a square matrix A.\n\n  If A is symmetric or Hermitian, its eigendecomposition (eigen) is used to\n  compute the sine. Otherwise, the sine is determined by calling exp.\n\n  Examples\n  ≡≡≡≡≡≡≡≡≡≡\n\n  julia> sin(fill(1.0, (2,2)))\n  2×2 Array{Float64,2}:\n   0.454649  0.454649\n   0.454649  0.454649","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Top","category":"page"},{"location":"overview/#User-defined-functions-1","page":"Overview Julia","title":"User defined functions","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"julia> function f(x, ϕ, b)\n         sin(x + ϕ) + b\n       end\nf (generic function with 1 method)\n\njulia> 0.3f(0.5π, 0.1π, 1)\n0.5853169548885461\n","category":"page"},{"location":"overview/#Multiple-dispatch-1","page":"Overview Julia","title":"Multiple dispatch","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"In object oriented languages like Java we can overload a method. Julia, however, is a functional language. Here we can use the same function name as long as the signatures are different.","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"julia> f(x) = sin(x) # function with one argument\nf (generic function with 1 methods)\n\njulia> f(x, ψ) = sin(x - ψ)  # function with two arguments\nf (generic function with 2 methods)\n\njulia> f(x, ψ, b) = sin(x - ψ) + b   # function with three arguments\nf (generic function with 3 methods)\n\njulia> f(x::Int64) = sin(x/180 * π) # function in degrees, argument has to be an integer\nf (generic function with 4 methods)\n\njulia> methods(f) # show all methods of the function f\n# 4 methods for generic function \"f\":\n[1] f(x::Int64) in Main at REPL[10]:1\n[2] f(x) in Main at REPL[2]:1\n[3] f(x, ψ) in Main at REPL[3]:1\n[4] f(x, ψ, b) in Main at REPL[4]:1\n\njulia> f(0.5π) # 90 degrees in radians\n1.0\n\njulia> f(0.5π, 0.1π) # with 0.1π phase shift in radians\n0.9510565162951536\n\njulia> f(0.5π, 0.1π, 1)\n1.9510565162951536\n\njulia> f(90) # 90 degrees as integer\n1.0\n\njulia> f(90.0) # should be 0.5π\n0.8939966636005579\n","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Top","category":"page"},{"location":"overview/#User-defined-data-structures-1","page":"Overview Julia","title":"User defined data structures","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Julia is not a object oriented programming language. But you can define data structures with constructors, and use the dot notation to refer to its data elements.","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"\njulia> struct Subscriber\n           id::String\n           name::String\n           email::String\n           #constructors\n           Subscriber(name::String) = new( createKey(name), name, \"\" )\n           Subscriber(name::String, email::String) = new( createKey(name), name, email )\n       end # defined Subscriber object\n\njulia> createKey(name::String) = string(hash(name * string(time())))\ncreateKey (generic function with 1 method)\n\njulia> daisy = Subscriber(\"Daisy\")\nSubscriber(\"6761641919537447636\", \"Daisy\", \"\")\n\njulia> daisy.name\n\"Daisy\"","category":"page"},{"location":"overview/#Plotting-data-1","page":"Overview Julia","title":"Plotting data","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"See Plots","category":"page"},{"location":"overview/#Installing-the-Plots-package-1","page":"Overview Julia","title":"Installing the Plots package","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"julia> ]\n\n(v1.1) pkg> add Plots <Enter>\n\n(v1.1) pkg> Ctrl-C\n\njulia>","category":"page"},{"location":"overview/#Using-Plots-1","page":"Overview Julia","title":"Using Plots","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"\njulia> using Plots; gr()\n\njulia> plot(x -> sin(x/180 * π), 0:01:360, xlabel=\"Degrees\", title=\"Plot sin\", label=\"No phase shift\")\n\njulia> ψ = 30 # degrees\n30\n\njulia> plot!( x -> sin( (x - ψ)/180 * π ), 0:01:360, label=\"$(ψ)° phase shift\")\n","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Top","category":"page"},{"location":"overview/#Useful-to-know-Version-1.1.1-(2019-05-16)-1","page":"Overview Julia","title":"Useful to know - Version 1.1.1 (2019-05-16)","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Testing conditions","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"julia> x = 5\n5\n\njulia> 0 < x < 6\ntrue\n\njulia> 0 ≤ x ≤ 5 # ≤  is \\le<Tab>\ntrue\n\njulia> 0 ≤ x ≤ 4\nfalse\n\njulia> 5 ≥ x ≥ 0 # ≥ is \\ge<Tab>\ntrue\n\njulia> x ≠ 4 # ≠ is \\ne<Tab>\ntrue\n","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Sets, symbolsπ","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"julia> a = [1, 2, 3]\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\njulia> b = [3, 4, 5]\n3-element Array{Int64,1}:\n 3\n 4\n 5\n\njulia> a ∩ b # ∩ is \\cap<Tab>, also intersect(a, b)\n1-element Array{Int64,1}:\n 3\n\njulia> a ∪ b # ∩ is \\cup<Tab>, also union(a, b)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\njulia> symdiff(a, b) # forgot the symbol\n4-element Array{Int64,1}:\n 1\n 2\n 4\n 5\n\njulia> 3 ∈ a # 3 element of a, \\in<Tab>\ntrue\n\njulia> 3 ∉ a # 3 not an element of a, \\notin<Tab>\nfalse\n\njulia> a ⊆ b # a subset of b, ⊆ is \\subseteq<Tab>\nfalse\n\njulia> b ⊇ [3, 4] # b is superset of [3, 4], ⊆ = \\supseteq<Tab>\ntrue","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Natural constant ℯ and π","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"\njulia> ℯ # \\euler<Tab>\nℯ = 2.7182818284590...\n\njulia> π # \\pi<Tab>\nπ = 3.1415926535897...\n\njulia> factorial(4)\n24\n\njulia> 1*2*3*4\n24","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Functional programming","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"\njulia> a = [2, 3, 4]\n3-element Array{Int64,1}:\n 2\n 3\n 4\n\njulia> map(x -> x^2, a)\n3-element Array{Int64,1}:\n 4\n 9\n16\n\njulia> reduce( (x, y) -> x + y, a)\n9\n\njulia> sum(a)\n9\n\njulia> reduce( (x, y) -> x^2 + y^2, a)\n185\n\njulia> (2^2 + 3^2)^2 + 4^2\n185","category":"page"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Top","category":"page"},{"location":"overview/#Summary-1","page":"Overview Julia","title":"Summary","text":"","category":"section"},{"location":"overview/#","page":"Overview Julia","title":"Overview Julia","text":"Top","category":"page"},{"location":"chapter5/#.-Create-and-Test-Infrastructure.jl-1","page":"5 - Create and Test Infrastructure.jl","title":"5. Create and Test Infrastructure.jl","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"The Infrastructure has functions that refer to the outer world and can use elements from the Domain and API layers. For example:","category":"page"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"converting JSON data to Julia objects or visa versa.\nstoring Julia's objects.\nretrieving objects.\nEvent Sourcing, registering events, and replaying a history of events.\nCQRS (Command Query Responsibility Segregation), separating events from queries.","category":"page"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"In this chapter, you learn to store and retrieve data-types.","category":"page"},{"location":"chapter5/#Contents-1","page":"5 - Create and Test Infrastructure.jl","title":"Contents","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"Pages = [\"chapter5.md\"]","category":"page"},{"location":"chapter5/#Infrastructure.jl-1","page":"5 - Create and Test Infrastructure.jl","title":"Infrastructure.jl","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"module Infrastructure #1\n\nimport ..Accounts: Domain, API #2\n\nusing .Domain, .API #3\n\nusing Serialization #4\n\nexport add_to_file, read_from_file #5\n\nfunction add_to_file(file::String, data::Array{T, 1} where T <: Any) #6\n    io = open(file, \"a+\")\n    [serialize(io, r) for r in data]\n    close(io)\nend\n\nfunction read_from_file(file::String) #7\n    io = open(file, \"r\")\n\n    r = []\n    while !eof(io)\n        push!(r, deserialize(io))\n    end\n\n    close(io)\n\n    return r\nend\n\nend\n","category":"page"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"#1 The module name is Infrastructure.","category":"page"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"#2 The sub-module uses only the elements that are defined in the higher layers, Domain, API, Julia, and any loaded packages.","category":"page"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"#3 The code instantiates the sub-modules Domain and API.","category":"page"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"#4 Data stored on disk has to be serialized.","category":"page"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"#5 We export the methods read_from_file and add_to_file.","category":"page"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"#6 read_from_file.","category":"page"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"#7 add_to_file.","category":"page"},{"location":"chapter5/#Accounts.jl-1","page":"5 - Create and Test Infrastructure.jl","title":"Accounts.jl","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"module Accounts\n\n#export EMAIL, WORK # Domain\n#export create # API\n#export add_to_file, read_from_file # Infrastructure\n\ninclude(\"Domain.jl\"); using .Domain\ninclude(\"API.jl\"); using .API\ninclude(\"Infrastructure.jl\"); using .Infrastructure\n\nend","category":"page"},{"location":"chapter5/#test_infr.jl-1","page":"5 - Create and Test Infrastructure.jl","title":"test_infr.jl","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"using Pkg; Pkg.activate(\".\")\n\nimport Accounts: Domain, API, Infrastructure\n\nusing .Domain, .API, .Infrastructure\n\nconst FILE_ACCOUNTS = \"./test_accounts.txt\"\n\ndonald_email = create(EMAIL, \"donald@duckcity.com\")\ndonald_work = create(WORK,\n  \"\"\"\n  Donalds Hardware Store\n  attn. Donald Duck\n  1190 Seven Seas Dr\n  FL 32830 Lake Buena Vista\n  USA\n  \"\"\"\n)\n\naddresses = [donald_email, donald_work]\n\ndonald = create(\"Donald Duck\", addresses)\n\nadd_to_file(FILE_ACCOUNTS, [donald])\n\nresult = read_from_file(FILE_ACCOUNTS)\n\nprintln(result)","category":"page"},{"location":"chapter5/#runtests.jl-1","page":"5 - Create and Test Infrastructure.jl","title":"runtests.jl","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"using Accounts\nusing Test\n\nconst FILE_ACCOUNTS = \"./test_accounts.txt\"\n\nimport Accounts: Domain, API, Infrastructure\nusing .Domain, .API, .Infrastructure\n\n@testset \"Domain.jl\" begin\n    donald_email = Address(EMAIL, \"donald@duckcity.com\")\n    donald = Person(\"Donald duck\", [donald_email])\n    email_addresses = filter(x -> x.address_type == EMAIL, donald.addresses)\n    @test email_addresses[1].address == \"donald@duckcity.com\"\nend\n\n@testset \"API.jl\" begin\n    donald_email = Address(EMAIL, \"donald@duckcity.com\")\n    donald = Person(\"Donald Duck\", [donald_email])\n    email_addresses = filter(x -> x.address_type == EMAIL, donald.addresses)\n    @test email_addresses[1].address == \"donald@duckcity.com\"\nend\n\n@testset \"Infrastructure.jl\" begin\n    donald_email = create(EMAIL, \"donald@duckcity.com\")\n    donald = create(\"Donald Duck\", [donald_email])\n    add_to_file(FILE_ACCOUNTS, [donald])\n    result = read_from_file(FILE_ACCOUNTS)\n    first_person = result[1]\n    @test first_person.addresses[1].address == \"donald@duckcity.com\"\n    cmd = `rm $FILE_ACCOUNTS`\n    run(cmd)\nend\n","category":"page"},{"location":"chapter5/#Exercise-5.1-Adding-the-Sub-module-Infrastructure.-1","page":"5 - Create and Test Infrastructure.jl","title":"Exercise 5.1 - Adding the Sub-module Infrastructure.","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"Create the file Infrastructure.jl and add the code of section Infrastructure.jl to the file.\nAdd the code from section runtests.jl to the file runtests.jl.\nModify  Accounts.jl according to section Accounts.jl.\nGo to the package manager, activate Accounts (activate .).\nAdd the Serialization package to the dependencies.\nRun the test (test Accounts). You should see:","category":"page"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"Test Summary: | Pass  Total\nDomain.jl     |    1      1\nTest Summary: | Pass  Total\nAPI.jl        |    1      1\nTest Summary:     | Pass  Total\nInfrastructure.jl |    1      1\n    Testing Accounts tests passed","category":"page"},{"location":"chapter5/#","page":"5 - Create and Test Infrastructure.jl","title":"5 - Create and Test Infrastructure.jl","text":"Create the file test_infr.jl and copy the code from section test_infr.jl into it.\nTest the code.\nPush the changes to your GitHub repository. Check the changes on GitHub.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"(Image: AppliGate)","category":"page"},{"location":"#Building-Business-Applications-with-Julia-1","page":"Business Applications with Julia","title":"Building Business Applications with Julia","text":"","category":"section"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"In this course, you learn to create Julia modules. The software you write makes use of these modules and runs in Docker containers.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"info: Info\nSee the Blog for the latest remarks!","category":"page"},{"location":"#Preface-1","page":"Business Applications with Julia","title":"Preface","text":"","category":"section"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"In July 2018, I read an article about a new programming language that was rapidly gaining in popularity, Julia. It appealed to me how you could define a function. Almost exactly as I learned it during my bachelor study electronics: f(x) = 2x² + 3x + 1, in Julia written as f(x) = 2x^2 + 3x + 1. Then I set up a project to learn how to implement the observer pattern. It was easy, but shelved it because I was working on Scala at that moment.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"While working with Scala, I came in touch with the Onion Architecture, after watching Wade Waldron's presentation, Domain-Driven Design, and Onion Architecture. Since then, I use it.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"The ease with which I could build business applications with Julia stayed with me.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"At the beginning of 2019, a recruiter told me that the interest in Scala in the Netherlands was waning. Should I continue with Scala?","category":"page"},{"location":"#A-course-syllabus?-1","page":"Business Applications with Julia","title":"A course syllabus?","text":"","category":"section"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"I decided to stop with Scala and picked up my Julia observer trial project again.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"It turned out that you can create effective documentation, using the package Documenter.jl. You write it in the markdown language and you can insert examples of how to use your code. During the creation of the HTML code, you can have the cases tested, which is useful if you later expand the module and generate the documentation again.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"I had already a GitHub Pages profile, and thought: \"Why not set up the AppliGate website in this way and link it to my profile.\" I did it: https://www.appligate.nl.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"With trying out so many things with Julia, the problem arose that I could not find specific trials back in my notes. After the success of the website, I thought: \"Why not set up a course where I can register all the interesting things?\".","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"In June 2020, I discovered a new package called Rocket.jl which supports the actor model. I know the actor model from my Scala and Akka period. It makes your application more robust and the workflow easier. It is the main reason I rewrite the course.","category":"page"},{"location":"#Business-Applications-with-Julia-1","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"","category":"section"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"The result is this course Building Business Applications with Julia. Chapters 1 till 6 are ready now.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"Rob Bontekoe","category":"page"}]
}
